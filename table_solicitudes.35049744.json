{
	"sql": "SELECT\n\ts.idtipoventa,\n\ts.fecha,\n\ts.fechacaptura,\n\ts.idcliente,\n\ts.idproducto,\n\ts.idplan,\n\ts.usuario,\n\ts.idtienda,\n\ts.fechamodif,\n\ts.orden,\n\ts.solicitudimg,\n\ts.estatus,\n\ts.idsolrazon,\n\ts.importeatt,\n\ts.importesms,\n\ts.plazo,\n\ts.observaciones,\n\ts.equipoincluido,\n\ts.rfc,\n\ts.idtratamiento,\n\ts.riesgo,\n\ts.observacionest,\n\ts.idcli,\n\ts.fecha1avta,\n\ts.idplan1avta,\n\ts.dn1avta,\n\ts.idproceso,\n\ts.idorigenventa,\n\ts.estatusentrega,\n\tcte.nombre,\n\tcte.paterno,\n\tcte.materno,\n\tev.estado,\n\tev.ciudad,\n\tev.cp,\n\tev.calle,\n\tev.numeroext,\n\tev.numeroint,\n\tev.colonia,\n\tp.descripcion,\n\tCONCAT('https://www.google.com/maps/search/?api=1&query=', REPLACE(TRIM(CONCAT_WS(' ',\n             IFNULL(ev.numeroext,''),IFNULL(ev.calle,''),IFNULL(ev.numeroint,''),\n             IFNULL(ev.colonia,''),IFNULL(ev.cp,''),IFNULL(ev.ciudad,''),IFNULL(ev.estado,'')\n           )),' ','+')) AS maps_url,\n\tCONCAT(TRIM(CONCAT_WS(' ',\n      IF(IFNULL(ev.calle,'')='','', CONCAT('C.',ev.calle)),\n      IFNULL(CONCAT('No.',ev.numeroext),''),\n      IFNULL(CONCAT('Int.',ev.numeroint),''),\n      IFNULL(ev.colonia,''), IFNULL(CONCAT('C.P.',ev.cp),''),\n      IFNULL(ev.ciudad,''), IFNULL(ev.estado,'')\n    ))) AS direccion,\n\ts.idsolicitud,\n\tss.equipo,\n\tss.chip,\n\tev.lat,\n\tev.lng\nFROM\n\tsolicitudes AS s\n\tLEFT OUTER JOIN clientes AS cte ON cte.idcliente = s.idcliente\n\tLEFT OUTER JOIN entregasvnp AS ev ON ev.idsolicitud = s.idsolicitud\n\tLEFT OUTER JOIN productos AS p ON p.idproducto = s.idproducto\n\tLEFT OUTER JOIN (SELECT\n\tss.idsolicitud,\n\tMAX(CASE WHEN pr.clasif = 'Equipo' THEN ss.esnimei END) AS equipo,\n\tMAX(CASE WHEN pr.clasif = 'Chip'   THEN ss.esnimei END) AS chip\nFROM\n\tseriessolicitadas AS ss\n\tINNER JOIN compras AS cp ON cp.noserie = ss.esnimei\n\tINNER JOIN productos AS pr ON pr.codigoIUSA = cp.codigoproducto\nGROUP BY\n\tss.idsolicitud\n) AS ss ON ss.idsolicitud = s.idsolicitud\nWHERE\n s.idtienda = 2\n\n",
	"connId": "conn",
	"originalTable": "solicitudes",
	"name": "solicitudes",
	"shortTableName": "solicitudes",
	"dbType": 0,
	"tableOwnerIdField": "idsolicitud",
	"usersOwnerIdField": "ID",
	"pageSizeRecords": 50,
	"pageSizeSelectorRecords": [
		"20",
		"30",
		"50",
		"100",
		"500",
		"all"
	],
	"keyFields": [
		"idsolicitud"
	],
	"detailsBadgeColor": "1e90ff",
	"detailsTables": [
		3847630651
	],
	"fields": [
		{
			"name": "idsolicitud",
			"sqlExpression": "s.idsolicitud",
			"index": 43,
			"strField": "idsolicitud",
			"type": 3,
			"autoinc": true,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Idsolicitud"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idtipoventa",
			"sqlExpression": "s.idtipoventa",
			"index": 1,
			"strField": "idtipoventa",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Idtipoventa"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "fecha",
			"sqlExpression": "s.fecha",
			"index": 2,
			"strField": "fecha",
			"type": 7,
			"separateEditViewFormats": true,
			"viewFormats": [
				{
					"format": "Short Date"
				},
				{
					"format": "Short Date",
					"pageType": "list"
				},
				{
					"format": "Short Date",
					"pageType": "print"
				},
				{
					"format": "Short Date",
					"pageType": "export"
				}
			],
			"editFormats": [
				{
					"format": "Readonly",
					"dateEditType": 11
				},
				{
					"format": "Readonly",
					"pageType": "add",
					"dateEditType": 11
				},
				{
					"format": "Date",
					"pageType": "search",
					"dateEditType": 11,
					"dateLastYearFactor": 1
				}
			],
			"defaultSearchOption": "Between",
			"searchOptions": [
				"Between"
			],
			"label": {
				"English": "Fecha"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "fechacaptura",
			"sqlExpression": "s.fechacaptura",
			"index": 3,
			"strField": "fechacaptura",
			"type": 135,
			"viewFormats": [
				{
					"format": "Short Date"
				}
			],
			"editFormats": [
				{
					"format": "Date",
					"dateEditType": 11
				}
			],
			"label": {
				"English": "Fechacaptura"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idcliente",
			"sqlExpression": "s.idcliente",
			"index": 4,
			"strField": "idcliente",
			"type": 3,
			"separateEditViewFormats": true,
			"viewFormats": [
				{},
				{
					"pageType": "list",
					"textShowFirstN": 20
				},
				{
					"pageType": "print"
				},
				{
					"pageType": "export"
				}
			],
			"editFormats": [
				{
					"format": "Readonly",
					"required": true,
					"denyDuplicateMessage": {
						"text": "El cliente %value% ya existe",
						"type": 0
					},
					"lookupType": 2,
					"lookupTable": "clientes",
					"lookupTableConnection": "conn",
					"lookupLinkField": "idcliente",
					"lookupDisplayField": "nombre_completo",
					"lookupAllowAdd": true,
					"lookupAllowEdit": true,
					"lookupControlType": 2,
					"lookupListPage": "list",
					"lookupAddPage": "add",
					"lookupEditPage": "edit",
					"lookupAutofillFields": [
						{
							"masterField": "nombre",
							"lookupField": "nombre"
						},
						{
							"masterField": "paterno",
							"lookupField": "paterno"
						},
						{
							"masterField": "materno",
							"lookupField": "materno"
						},
						{
							"masterField": "rfc",
							"lookupField": "rfc"
						},
						{
							"masterField": "cliente_id",
							"lookupField": "idcliente"
						},
						{
							"masterField": "estado",
							"lookupField": "estado"
						},
						{
							"masterField": "ciudad",
							"lookupField": "ciudad"
						},
						{
							"masterField": "cp",
							"lookupField": "idcp"
						}
					]
				},
				{
					"format": "Lookup wizard",
					"pageType": "add",
					"required": true,
					"denyDuplicateMessage": {
						"text": "El cliente %value% ya existe",
						"type": 0
					},
					"lookupType": 2,
					"lookupTable": "clientes",
					"lookupTableConnection": "conn",
					"lookupLinkField": "idcliente",
					"lookupDisplayField": "nombre_completo",
					"lookupOrderBy": "nombre_completo",
					"lookupAllowAdd": true,
					"lookupAllowEdit": true,
					"lookupControlType": 2,
					"lookupListPage": "list",
					"lookupAddPage": "add",
					"lookupEditPage": "edit",
					"lookupAutofillFields": [
						{
							"masterField": "nombre",
							"lookupField": "nombre"
						},
						{
							"masterField": "paterno",
							"lookupField": "paterno"
						},
						{
							"masterField": "materno",
							"lookupField": "materno"
						},
						{
							"masterField": "rfc",
							"lookupField": "rfc"
						},
						{
							"masterField": "cliente_id",
							"lookupField": "idcliente"
						},
						{
							"masterField": "estado",
							"lookupField": "estado"
						},
						{
							"masterField": "ciudad",
							"lookupField": "ciudad"
						},
						{
							"masterField": "cp",
							"lookupField": "idcp"
						}
					]
				},
				{
					"format": "Lookup wizard",
					"pageType": "search",
					"required": true,
					"denyDuplicateMessage": {
						"text": "El cliente %value% ya existe",
						"type": 0
					},
					"lookupType": 2,
					"lookupTable": "clientes",
					"lookupTableConnection": "conn",
					"lookupLinkField": "idcliente",
					"lookupDisplayField": "nombre_completo",
					"lookupAllowAdd": true,
					"lookupAllowEdit": true,
					"lookupControlType": 2,
					"lookupListPage": "list",
					"lookupAddPage": "add",
					"lookupEditPage": "edit",
					"lookupAutofillFields": [
						{
							"masterField": "nombre",
							"lookupField": "nombre"
						},
						{
							"masterField": "paterno",
							"lookupField": "paterno"
						},
						{
							"masterField": "materno",
							"lookupField": "materno"
						},
						{
							"masterField": "rfc",
							"lookupField": "rfc"
						},
						{
							"masterField": "cliente_id",
							"lookupField": "idcliente"
						},
						{
							"masterField": "estado",
							"lookupField": "estado"
						},
						{
							"masterField": "ciudad",
							"lookupField": "ciudad"
						},
						{
							"masterField": "cp",
							"lookupField": "idcp"
						}
					]
				}
			],
			"label": {
				"English": "Idcliente",
				"Spanish": "Cliente"
			},
			"placeholder": {
				"Spanish": "Seleccione al cliente"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idproducto",
			"sqlExpression": "s.idproducto",
			"index": 5,
			"strField": "idproducto",
			"type": 3,
			"separateEditViewFormats": true,
			"viewFormats": [
				{
					"textShowFirstN": 20
				},
				{
					"pageType": "list",
					"textShowFirstN": 20
				},
				{
					"pageType": "print",
					"textShowFirstN": 20
				},
				{
					"pageType": "export",
					"textShowFirstN": 20
				}
			],
			"editFormats": [
				{
					"format": "Lookup wizard",
					"required": true,
					"lookupType": 2,
					"lookupTable": "productos",
					"lookupTableConnection": "conn",
					"lookupLinkField": "idproducto",
					"lookupDisplayField": "descripcion",
					"lookupOrderBy": "descripcion",
					"lookupControlType": 2,
					"lookupListPage": "list"
				},
				{
					"format": "Lookup wizard",
					"pageType": "add",
					"required": true,
					"lookupType": 2,
					"lookupTable": "productos",
					"lookupTableConnection": "conn",
					"lookupLinkField": "idproducto",
					"lookupDisplayField": "descripcion",
					"lookupOrderBy": "descripcion",
					"lookupControlType": 2,
					"lookupListPage": "list"
				},
				{
					"format": "Lookup wizard",
					"pageType": "search",
					"required": true,
					"lookupType": 2,
					"lookupTable": "productos",
					"lookupTableConnection": "conn",
					"lookupLinkField": "idproducto",
					"lookupDisplayField": "descripcion",
					"lookupOrderBy": "descripcion",
					"lookupControlType": 2,
					"lookupListPage": "list"
				}
			],
			"filterFormat": {
				"format": "Values list"
			},
			"label": {
				"English": "Idproducto",
				"Spanish": "Producto"
			},
			"placeholder": {
				"Spanish": "Seleccione el equipo"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idplan",
			"sqlExpression": "s.idplan",
			"index": 6,
			"strField": "idplan",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Lookup wizard",
					"lookupType": 2,
					"lookupTable": "planes",
					"lookupTableConnection": "conn",
					"lookupLinkField": "idplan",
					"lookupDisplayField": "plan",
					"lookupWhere": "uso = 'Vigente' and tipo='Masivo'"
				}
			],
			"label": {
				"English": "Idplan",
				"Spanish": "Plan"
			},
			"placeholder": {
				"Spanish": "Seleccione el plan"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "usuario",
			"sqlExpression": "s.usuario",
			"index": 7,
			"strField": "usuario",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Usuario"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idtienda",
			"sqlExpression": "s.idtienda",
			"index": 8,
			"strField": "idtienda",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Idtienda"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "fechamodif",
			"sqlExpression": "s.fechamodif",
			"index": 9,
			"strField": "fechamodif",
			"type": 135,
			"viewFormats": [
				{
					"format": "Short Date"
				}
			],
			"editFormats": [
				{
					"format": "Date",
					"dateEditType": 11
				}
			],
			"label": {
				"English": "Fechamodif"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "orden",
			"sqlExpression": "s.orden",
			"index": 10,
			"strField": "orden",
			"type": 200,
			"separateEditViewFormats": true,
			"viewFormats": [
				{},
				{
					"pageType": "list"
				},
				{
					"pageType": "print"
				},
				{
					"pageType": "export"
				}
			],
			"editFormats": [
				{
					"format": "Readonly"
				},
				{
					"pageType": "add"
				},
				{
					"format": "Readonly",
					"pageType": "search"
				}
			],
			"label": {
				"English": "Orden"
			},
			"placeholder": {
				"Spanish": "Ingrese la orden"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "solicitudimg",
			"sqlExpression": "s.solicitudimg",
			"index": 11,
			"strField": "solicitudimg",
			"type": 201,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Text area"
				}
			],
			"label": {
				"English": "Solicitudimg"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "estatus",
			"sqlExpression": "s.estatus",
			"index": 12,
			"strField": "estatus",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Lookup wizard",
					"lookupTable": "decisionessolicitud_lookup",
					"lookupTableConnection": "conn",
					"lookupLinkField": "decisionsolicitud",
					"lookupDisplayField": "decisionsolicitud",
					"lookupOrderBy": "decisionsolicitud"
				}
			],
			"label": {
				"English": "Estatus"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idsolrazon",
			"sqlExpression": "s.idsolrazon",
			"index": 13,
			"strField": "idsolrazon",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Idsolrazon"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "importeatt",
			"sqlExpression": "s.importeatt",
			"index": 14,
			"strField": "importeatt",
			"type": 5,
			"viewFormats": [
				{
					"format": "Number"
				}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Importeatt"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "importesms",
			"sqlExpression": "s.importesms",
			"index": 15,
			"strField": "importesms",
			"type": 5,
			"viewFormats": [
				{
					"format": "Number"
				}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Importesms"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "plazo",
			"sqlExpression": "s.plazo",
			"index": 16,
			"strField": "plazo",
			"type": 2,
			"separateEditViewFormats": true,
			"viewFormats": [
				{},
				{
					"pageType": "list"
				},
				{
					"pageType": "print"
				},
				{
					"pageType": "export"
				}
			],
			"editFormats": [
				{
					"format": "Readonly",
					"required": true,
					"lookupTable": "plazos",
					"lookupTableConnection": "conn",
					"lookupLinkField": "plazo",
					"lookupDisplayField": "plazo",
					"lookupOrderBy": "plazo"
				},
				{
					"format": "Lookup wizard",
					"pageType": "add",
					"required": true,
					"lookupTable": "plazos",
					"lookupTableConnection": "conn",
					"lookupLinkField": "plazo",
					"lookupDisplayField": "plazo",
					"lookupOrderBy": "plazo"
				},
				{
					"format": "Readonly",
					"pageType": "search",
					"required": true,
					"lookupTable": "plazos",
					"lookupTableConnection": "conn",
					"lookupLinkField": "plazo",
					"lookupDisplayField": "plazo",
					"lookupOrderBy": "plazo"
				}
			],
			"label": {
				"English": "Plazo"
			},
			"placeholder": {
				"Spanish": "Ingrese el plazo"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "observaciones",
			"sqlExpression": "s.observaciones",
			"index": 17,
			"strField": "observaciones",
			"type": 200,
			"separateEditViewFormats": true,
			"viewFormats": [
				{},
				{
					"pageType": "list",
					"textShowFirstN": 30
				},
				{
					"pageType": "print"
				},
				{
					"pageType": "export"
				}
			],
			"editFormats": [
				{},
				{
					"pageType": "add"
				},
				{
					"pageType": "search"
				}
			],
			"label": {
				"English": "Observaciones",
				"Spanish": "Observaciones"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "equipoincluido",
			"sqlExpression": "s.equipoincluido",
			"index": 18,
			"strField": "equipoincluido",
			"type": 2,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Equipoincluido"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "rfc",
			"sqlExpression": "s.rfc",
			"index": 19,
			"strField": "rfc",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Readonly"
				}
			],
			"label": {
				"English": "Rfc"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idtratamiento",
			"sqlExpression": "s.idtratamiento",
			"index": 20,
			"strField": "idtratamiento",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Idtratamiento"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "riesgo",
			"sqlExpression": "s.riesgo",
			"index": 21,
			"strField": "riesgo",
			"type": 129,
			"viewFormats": [
				{
					"linkDisplay": 2,
					"linkDisplayField": "direccion"
				}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Riesgo"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "observacionest",
			"sqlExpression": "s.observacionest",
			"index": 22,
			"strField": "observacionest",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Observacionest"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idcli",
			"sqlExpression": "s.idcli",
			"index": 23,
			"strField": "idcli",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Idcli",
				"Spanish": "Cliente ID"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "fecha1avta",
			"sqlExpression": "s.fecha1avta",
			"index": 24,
			"strField": "fecha1avta",
			"type": 7,
			"viewFormats": [
				{
					"format": "Short Date"
				}
			],
			"editFormats": [
				{
					"format": "Date",
					"dateEditType": 11
				}
			],
			"label": {
				"English": "Fecha1avta"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idplan1avta",
			"sqlExpression": "s.idplan1avta",
			"index": 25,
			"strField": "idplan1avta",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Idplan1avta"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "dn1avta",
			"sqlExpression": "s.dn1avta",
			"index": 26,
			"strField": "dn1avta",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Dn1avta"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idproceso",
			"sqlExpression": "s.idproceso",
			"index": 27,
			"strField": "idproceso",
			"type": 2,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Idproceso"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "idorigenventa",
			"sqlExpression": "s.idorigenventa",
			"index": 28,
			"strField": "idorigenventa",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"English": "Idorigenventa"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "nombre",
			"sqlExpression": "cte.nombre",
			"index": 30,
			"strField": "nombre",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Readonly"
				}
			],
			"label": {
				"Spanish": "Nombre(s)"
			},
			"placeholder": {
				"Spanish": "Nombre(s) del cliente"
			},
			"tableName": "clientes"
		},
		{
			"name": "paterno",
			"sqlExpression": "cte.paterno",
			"index": 31,
			"strField": "paterno",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Readonly"
				}
			],
			"label": {
				"Spanish": "Paterno"
			},
			"placeholder": {
				"Spanish": "Apellido paterno"
			},
			"tableName": "clientes"
		},
		{
			"name": "materno",
			"sqlExpression": "cte.materno",
			"index": 32,
			"strField": "materno",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Readonly"
				}
			],
			"label": {
				"Spanish": "Materno"
			},
			"placeholder": {
				"Spanish": "Apellido materno"
			},
			"tableName": "clientes"
		},
		{
			"name": "estado",
			"sqlExpression": "ev.estado",
			"index": 33,
			"strField": "estado",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"required": true
				}
			],
			"label": {
				"Spanish": "Estado"
			},
			"tableName": "entregasvnp"
		},
		{
			"name": "ciudad",
			"sqlExpression": "ev.ciudad",
			"index": 34,
			"strField": "ciudad",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"required": true
				}
			],
			"label": {
				"Spanish": "Ciudad"
			},
			"tableName": "entregasvnp"
		},
		{
			"name": "cp",
			"sqlExpression": "ev.cp",
			"index": 35,
			"strField": "cp",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"Spanish": "CP"
			},
			"tableName": "entregasvnp"
		},
		{
			"name": "calle",
			"sqlExpression": "ev.calle",
			"index": 36,
			"strField": "calle",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"required": true
				}
			],
			"label": {
				"Spanish": "Calle"
			},
			"tableName": "entregasvnp"
		},
		{
			"name": "numeroext",
			"sqlExpression": "ev.numeroext",
			"index": 37,
			"strField": "numeroext",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"required": true
				}
			],
			"label": {
				"Spanish": "# Ext"
			},
			"tableName": "entregasvnp"
		},
		{
			"name": "numeroint",
			"sqlExpression": "ev.numeroint",
			"index": 38,
			"strField": "numeroint",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{}
			],
			"label": {
				"Spanish": "# Int"
			},
			"tableName": "entregasvnp"
		},
		{
			"name": "colonia",
			"sqlExpression": "ev.colonia",
			"index": 39,
			"strField": "colonia",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"required": true
				}
			],
			"label": {
				"Spanish": "Colonia"
			},
			"tableName": "entregasvnp"
		},
		{
			"name": "descripcion",
			"sqlExpression": "p.descripcion",
			"index": 40,
			"strField": "descripcion",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Readonly"
				}
			],
			"label": {
				"Spanish": "Descripcion"
			},
			"tableName": "productos"
		},
		{
			"name": "maps_url",
			"sqlExpression": "CONCAT('https://www.google.com/maps/search/?api=1&query=', REPLACE(TRIM(CONCAT_WS(' ',\n             IFNULL(ev.numeroext,''),IFNULL(ev.calle,''),IFNULL(ev.numeroint,''),\n             IFNULL(ev.colonia,''),IFNULL(ev.cp,''),IFNULL(ev.ciudad,''),IFNULL(ev.estado,'')\n           )),' ','+'))",
			"index": 41,
			"strField": "maps_url",
			"type": 200,
			"viewFormats": [
				{
					"format": "Hyperlink",
					"linkNewWindow": true,
					"linkDisplay": 2,
					"linkDisplayField": "direccion",
					"linkDisplayText": {
						"text": "Dirección de entrega...",
						"type": 0
					}
				}
			],
			"editFormats": [
				{}
			],
			"label": {
				"Spanish": "Maps Url"
			},
			"tableName": ""
		},
		{
			"name": "direccion",
			"sqlExpression": "CONCAT(TRIM(CONCAT_WS(' ',\n      IF(IFNULL(ev.calle,'')='','', CONCAT('C.',ev.calle)),\n      IFNULL(CONCAT('No.',ev.numeroext),''),\n      IFNULL(CONCAT('Int.',ev.numeroint),''),\n      IFNULL(ev.colonia,''), IFNULL(CONCAT('C.P.',ev.cp),''),\n      IFNULL(ev.ciudad,''), IFNULL(ev.estado,'')\n    )))",
			"index": 42,
			"strField": "direccion",
			"type": 200,
			"viewFormats": [
				{
					"format": "Custom",
					"customExpression": "\r\n"
				}
			],
			"editFormats": [
				{}
			],
			"label": {
				"Spanish": "Direccion"
			},
			"tableName": ""
		},
		{
			"name": "estatusentrega",
			"sqlExpression": "s.estatusentrega",
			"index": 29,
			"strField": "estatusentrega",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Lookup wizard",
					"lookupTable": "estatusentregas",
					"lookupTableConnection": "conn",
					"lookupLinkField": "id",
					"lookupDisplayField": "estatusentrega"
				}
			],
			"label": {
				"Spanish": "Estatus entrega"
			},
			"tableName": "solicitudes"
		},
		{
			"name": "equipo",
			"sqlExpression": "ss.equipo",
			"index": 44,
			"strField": "equipo",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Readonly"
				}
			],
			"label": {
				"Spanish": "Equipo"
			},
			"tableName": ""
		},
		{
			"name": "chip",
			"sqlExpression": "ss.chip",
			"index": 45,
			"strField": "chip",
			"type": 200,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"format": "Readonly"
				}
			],
			"label": {
				"Spanish": "Simcard"
			},
			"tableName": ""
		},
		{
			"name": "lat",
			"sqlExpression": "ev.lat",
			"index": 46,
			"strField": "lat",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"required": true
				}
			],
			"label": {
				"Spanish": "Latitud"
			},
			"tableName": "entregasvnp"
		},
		{
			"name": "lng",
			"sqlExpression": "ev.lng",
			"index": 47,
			"strField": "lng",
			"type": 3,
			"viewFormats": [
				{}
			],
			"editFormats": [
				{
					"required": true
				}
			],
			"label": {
				"Spanish": "Longitud"
			},
			"tableName": "entregasvnp"
		}
	],
	"whereTabs": [
		{}
	],
	"eventHandlers": [
		{
			"eventId": "EVENT_AFTERADD",
			"pageType": "add",
			"code": "/*\n// Events → Add → After record added\nglobal $conn;\n\n//********************************************************************************\n//Se inicia la trasancción\n\nDB::Exec(\"SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED\", $conn);\n\n// Inicia transacción\nDB::Exec(\"START TRANSACTION\", $conn);\n\n// marca en sesión por si necesitas saber que hay una txn abierta\n$_SESSION['add_txn_started'] = true;\n\n//**********************************************************************************\n\n\n$ok = true;\n$err = \"\";\n\n// PK del registro principal recién insertado\n$pk = (int)$keys[\"idsolicitud\"];  // ajusta al nombre real\n\n\n\n\n// Recupera y limpia el stash\n$extras = $_SESSION['solicitudes_add_extras'][$pageObject->id] ?? [];\nunset($_SESSION['solicitudes_add_extras'][$pageObject->id]);\n\n// Ya tienes $keys[\"idsolicitud\"] del registro insertado en solicitudes\n$idsolicitud = (int)$keys[\"idsolicitud\"];\n\n// EJEMPLO: insertar dirección de entrega en entregasvnp usando los extras\nif (!empty($extras)) {\n    $sql = sprintf(\n        \"INSERT INTO entregasvnp (idsolicitud, estado, ciudad, cp, calle, numeroext, numeroint, colonia)\n         VALUES (%d, %s, %s, %d, %s, %s, %s, %s)\",\n        $idsolicitud,\n        db_prepare_string($extras[\"estado\"]    ?? \"\"),\n        db_prepare_string($extras[\"ciudad\"]    ?? \"\"),\n        db_prepare_string($extras[\"cp\"]        ?? \"\"),\n        db_prepare_string($extras[\"calle\"]     ?? \"\"),\n        db_prepare_string($extras[\"numeroext\"] ?? \"\"),\n        db_prepare_string($extras[\"numeroint\"] ?? \"\"),\n        db_prepare_string($extras[\"colonia\"]   ?? \"\")\n    );\n    $ok = DB::Exec($sql, $conn) !== false;\n    if(!$ok){ $err = db_error($conn); }\n\n  //  db_exec($sql, $conn);\n}\n\nif($ok){\n    $esnimei = $_SESSION[\"esnimei\"] ?? null;\n    if (!empty($esnimei)) {\n           $sql = sprintf(\n            \"INSERT INTO seriessolicitadas (idsolicitud, esnimei)\n             VALUES (%d, %s)\",\n            $idsolicitud,\n            db_prepare_string($esnimei    ?? \"\")\n        );\n        db_exec($sql, $conn);\n    \n    }\n    \n    $simcard = $_SESSION[\"simcard\"] ?? null;\n    if (!empty($esnimei)) {\n           $sql = sprintf(\n            \"INSERT INTO seriessolicitadas (idsolicitud, esnimei)\n             VALUES (%d, %s)\",\n            $idsolicitud,\n            db_prepare_string($simcard    ?? \"\")\n        );\n        db_exec($sql, $conn);\n    \n    }\n}\n// Si quieres log/debug:\n// file_put_contents(\"extras_log.txt\", date('c').\" PID:\".$pageObject->id.\" \".json_encode($extras,JSON_UNESCAPED_UNICODE).PHP_EOL, FILE_APPEND);\n\nif($ok){\n  DB::Exec(\"COMMIT\", $conn);\n  DB::Exec(\"SET autocommit=1\", $conn); // higiene (opcional)\n} else {\n  DB::Exec(\"ROLLBACK\", $conn);\n  DB::Exec(\"SET autocommit=1\", $conn);\n\n  // informa al usuario y evita que parezca “éxito”\n  // para Add normal:\n  $_SESSION[\"last_error\"] = \"No se pudo completar la operación: \".$err;\n  header(\"Location: \".$pageObject->shortTableName.\"_add.php?message=rollback\"); // ajusta ruta\n  exit;\n}\n*/"
		},
		{
			"eventId": "EVENT_BEFOREADD",
			"pageType": "add",
			"code": "// Place event code here.\n// Use \"Add Action\" button to add code snippets.\n// Events → Add → Before record added\n// Copia campos del JOIN a un arreglo y quítalos de $values\n\nDB::Exec(\"START TRANSACTION\", $conn);\n\n\n$values[\"fecha\"]=date('Y-m-d');\n$values[\"idtienda\"]=2;  //Tienda no presencial\n$values[\"idtipoventa\"]=5; //Renovación Tradicional (Equipo y Chip)\n$values[\"estatus\"]=\"ACTUALIZADA\";\n$values[\"equipoincluido\"]=1;\n$values[\"usuario\"]=$_SESSION[\"UserID\"];\n\n\n$camposExtra = [\"nombre\",\"paterno\",\"materno\",\"estado\",\"ciudad\",\"cp\",\"calle\",\"numeroext\",\"numeroint\",\"colonia\"];\n\n\n// Helpers para armar valores seguros\nfunction q($v){               // cadenas/fechas: 'valor' o NULL\n  return (isset($v) && $v !== '' ? db_prepare_string($v) : \"NULL\");\n}\nfunction qi($v){              // enteros: número o NULL\n  return (isset($v) && $v !== '' ? (int)$v : \"NULL\");\n}\nfunction qb($v){              // booleano/bit: 0/1\n  return (!empty($v) ? 1 : 0);\n}\n\n// Construcción del INSERT\n$sqlMain = \"INSERT INTO solicitudes\n  (fecha, idtienda, idtipoventa, estatus, equipoincluido, usuario,\n   idcliente, idproducto, idplan, orden, plazo, rfc, idcli, estatusentrega)\nVALUES (\".\n    q($values['fecha'])           .\", \".\n    qi($values['idtienda'])       .\", \".\n    qi($values['idtipoventa'])    .\", \".\n    q($values['estatus'])         .\", \".\n    qb($values['equipoincluido']) .\", \".\n    q($values['usuario'])         .\", \".\n    qi($values['idcliente'])      .\", \".\n    qi($values['idproducto'])     .\", \".\n    qi($values['idplan'])         .\", \".\n    q($values['orden'])           .\", \".\n    qi($values['plazo'])          .\", \".\n    q($values['rfc'])             .\", \".\n    qi($values['idcli'])           .\", \".\n    qi($values['estatusentrega'])  .\n\")\";\n\nif (!DB::Exec($sqlMain, $conn)) {\n    DB::Exec(\"ROLLBACK\", $conn);\n    $message = \"No se pudo crear la solicitud: \".db_error($conn);\n    return false;               // el form queda con los valores\n}\n$idsolicitud = db_insertid($conn);\n\n\n\n\n\n$extras = [];\nforeach ($camposExtra as $f) {\n    if (array_key_exists($f, $values)) {\n        $extras[$f] = $values[$f];\n        unset($values[$f]);             // <- evita \"Unknown column ...\" en el INSERT de solicitudes\n    } else {\n        // Si alguno lo pones como \"Custom field\" (no ligado a DB), recupéralo del POST:\n        $pv = postvalue($f);\n        if ($pv !== null) $extras[$f] = $pv;\n    }\n}\n\n// Guarda en sesión, indexado por el id de la página para evitar choques con otras pestañas\n$_SESSION['solicitudes_add_extras'] = $_SESSION['solicitudes_add_extras'] ?? [];\n$_SESSION['solicitudes_add_extras'][$pageObject->id] = $extras;\n\n// Continúa con el insert normal en solicitudes\n\n$strSQLExists=\"SELECT\ncompras.noserie\nFROM compras\nLEFT OUTER JOIN ventas v ON compras.noserie = v.esnimei\nLEFT OUTER JOIN movimientos m ON compras.noserie = m.esnimei\nLEFT OUTER JOIN seriessolicitadas ss on compras.noserie=ss.esnimei     \nLEFT OUTER JOIN (SELECT t.esnimei,t.tiendadestino,t.`fecharecepcion` FROM traspasosdet t INNER JOIN (SELECT MAX(idtraspasodet) idtraspaso FROM traspasosdet GROUP BY esnimei) t1 ON t.idtraspasodet=t1.idtraspaso) t ON compras.noserie=t.esnimei\nINNER JOIN productos ON compras.codigoproducto = productos.codigoIUSA\nWHERE   v.esnimei is null and m.esnimei is null and ss.esnimei is null and (t. esnimei is null or t.fecharecepcion is not null and t.fecharecepcion<>'0000-00-00')\n  and compras.tienda=2 and compras.clasif = 2 and productos.Clasif='Equipo' AND productos.idproducto=\". $values['idproducto']. \" LIMIT 1 \";\n$rsExists = db_query($strSQLExists,$conn);\n$data=db_fetch_array($rsExists);\n\nif (!$data)\n{\n\t\t$message=\"No existe saldo en el inventario para el producto seleccionado\";\n\treturn false;\n\n} else {\n    $_SESSION[\"esnimei\"] = $data['noserie'];\n}\n\n\n$strSQLExists=\"SELECT\ncompras.noserie\nFROM compras\nLEFT OUTER JOIN ventas v ON compras.noserie = v.esnimei\nLEFT OUTER JOIN movimientos m ON compras.noserie = m.esnimei\nLEFT OUTER JOIN seriessolicitadas ss on compras.noserie=ss.esnimei     \nLEFT OUTER JOIN (SELECT t.esnimei,t.tiendadestino,t.`fecharecepcion` FROM traspasosdet t INNER JOIN (SELECT MAX(idtraspasodet) idtraspaso FROM traspasosdet GROUP BY esnimei) t1 ON t.idtraspasodet=t1.idtraspaso) t ON compras.noserie=t.esnimei\nINNER JOIN productos ON compras.codigoproducto = productos.codigoIUSA\nWHERE   v.esnimei is null and m.esnimei is null  and ss.esnimei is null and (t. esnimei is null or t.fecharecepcion is not null and t.fecharecepcion<>'0000-00-00')\n  and compras.tienda=2 and compras.clasif = 2 and productos.Clasif='Chip' LIMIT 1 \";\n$rsExists = db_query($strSQLExists,$conn);\n$data=db_fetch_array($rsExists);\n\nif (!$data)\n{\n\t\t$message=\"No existe saldo en el inventario de simcards\";\n\treturn false;\n\n} else {\n    $_SESSION[\"simcard\"] = $data['noserie'];\n}\n\n\n$extras = $_SESSION['solicitudes_add_extras'][$pageObject->id] ?? [];\nunset($_SESSION['solicitudes_add_extras'][$pageObject->id]);\n\n// Ya tienes $keys[\"idsolicitud\"] del registro insertado en solicitudes\n//$idsolicitud = (int)$keys[\"idsolicitud\"];\n\n// EJEMPLO: insertar dirección de entrega en entregasvnp usando los extras\nif (!empty($extras)) {\n    $sql = sprintf(\n        \"INSERT INTO entregasvnp (idsolicitud, estado, ciudad, cp, calle, numeroext, numeroint, colonia)\n         VALUES (%d, %s, %s, %d, %s, %s, %s, %s)\",\n        $idsolicitud,\n        db_prepare_string($extras[\"estado\"]    ?? \"\"),\n        db_prepare_string($extras[\"ciudad\"]    ?? \"\"),\n        db_prepare_string($extras[\"cp\"]        ?? \"\"),\n        db_prepare_string($extras[\"calle\"]     ?? \"\"),\n        db_prepare_string($extras[\"numeroext\"] ?? \"\"),\n        db_prepare_string($extras[\"numeroint\"] ?? \"\"),\n        db_prepare_string($extras[\"colonia\"]   ?? \"\")\n    );\n    if (!DB::Exec($sql, $conn)) {\n        DB::Exec(\"ROLLBACK\", $conn);\n        $message = \"No se pudo guardar la entrega: \".db_error($conn);\n        return false;               // el form NO pierde lo tecleado\n    }\n  //  db_exec($sql, $conn);\n}\n\n    $esnimei = $_SESSION[\"esnimei\"] ?? null;\n    if (!empty($esnimei)) {\n           $sql = sprintf(\n            \"INSERT INTO seriessolicitadas (idsolicitud, esnimei)\n             VALUES (%d, %s)\",\n            $idsolicitud,\n            db_prepare_string($esnimei    ?? \"\")\n        );\n    if (!DB::Exec($sql, $conn)) {\n        DB::Exec(\"ROLLBACK\", $conn);\n        $message = \"No se pudo guardar el equipo: \".db_error($conn);\n        return false;               // el form NO pierde lo tecleado\n    }\n    \n    }\n    \n    $simcard = $_SESSION[\"simcard\"] ?? null;\n    if (!empty($esnimei)) {\n           $sql = sprintf(\n            \"INSERT INTO seriessolicitadas (idsolicitud, esnimei)\n             VALUES (%d, %s)\",\n            $idsolicitud,\n            db_prepare_string($simcard    ?? \"\")\n        );\n    if (!DB::Exec($sql, $conn)) {\n        DB::Exec(\"ROLLBACK\", $conn);\n        $message = \"No se pudo guardar el sincard: \".db_error($conn);\n        return false;               // el form NO pierde lo tecleado\n    }\n    \n    }\n\nDB::Exec(\"COMMIT\", $conn);\n\n// “flash message” en sesión para mostrarlo en verde tras el redirect\n$_SESSION['flash_ok'] = \"Solicitud #{$idsolicitud} guardada correctamente.\";\n\n// Redirige a la página Add (form limpio)\nheader(\"Location: \".$pageObject->shortTableName.\"_add.php?new=1\");\nexit;\n\n\n\n\nreturn false;\n\n\n"
		},
		{
			"eventId": "EVENT_JS_ONLOAD",
			"pageType": "list",
			"code": "/*(function(){\r\n  console.log('[solicitudes list] onLoad handler armado');\r\n\r\n  document.addEventListener('click', function(e){\r\n    // Ubica el <a> del botón Edit según tu HTML\r\n    var a = e.target && (\r\n      e.target.closest('span[data-itemtype=\"grid_edit\"] a') ||\r\n      e.target.closest('a[href*=\"solicitudes_edit.php\"]') ||\r\n      e.target.closest('a[href*=\"_edit.php\"]')\r\n    );\r\n    if(!a) return;\r\n\r\n    var raw = a.getAttribute('href') || a.getAttribute('data-href') || '';\r\n    if(!raw) return;\r\n\r\n    // Construye URL absoluta y ajusta el parámetro page=edit1\r\n    // (URL maneja bien & y &amp;)\r\n    var url = new URL(raw, document.baseURI);\r\n\r\n    // Solo si es la página de edición de solicitudes\r\n    if (/\\/solicitudes_edit\\.php$/i.test(url.pathname)) {\r\n      url.searchParams.set('page', 'edit1'); // fuerza page=edit1\r\n    } else {\r\n      // Si fuera otro *_edit.php, también lo soportamos\r\n      url.searchParams.set('page', 'edit1');\r\n    }\r\n\r\n    // Bloquea navegación original y redirige a la alterna\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    e.stopImmediatePropagation();\r\n\r\n    window.location.assign(url.toString());\r\n  }, true); // CAPTURE=true para ganar a otros listeners\r\n})();\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n(function(){\r\n  var $ = jQuery;\r\n\r\n  // Cambia el selector al *itemid* real del botón Logistic (data-itemid=\"logistic_btn\")\r\n  $(document).on('click', 'span[data-itemid=\"logistic_btn\"] a', function(ev){\r\n    ev.preventDefault(); ev.stopPropagation();\r\n\r\n    var row = $(this).closest('tr');\r\n\r\n    // Tomamos el href del Edit estándar de ESTA fila (tiene las keys correctas)\r\n    var hrefEdit = row.find('span[data-itemtype=\"grid_edit\"] a').attr('href') || '';\r\n    if (!hrefEdit) { alert('No se pudo localizar el enlace Edit de la fila.'); return; }\r\n\r\n    var urlObj = new URL(hrefEdit, document.baseURI);\r\n    // Forzamos page=edit1 y conservamos editid1, editid2, etc.\r\n    urlObj.searchParams.set('page','edit1');\r\n\r\n    window.location.assign(urlObj.toString());\r\n  });\r\n})();\r\n\r\n\r\n\r\n\r\n\r\nfunction redirigirReporte() {\r\n  var val2 = $(\"#edt_FechaIn\").val();\r\n  var val3 = $(\"#edt_FechaFn\").val();\r\n\r\n  \r\n  window.location.href = 'solicitudes_list.php?FechaIn=' + val2 +\r\n                           '&FechaFn=' + val3;\r\n}\r\n// Asignar evento a todos los campos\r\n$(\"#edt_FechaIn, #edt_FechaFn\")\r\n  .on(\"change\", redirigirReporte);\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
		},
		{
			"eventId": "EVENT_JS_ONLOAD",
			"pageType": "edit",
			"code": "\n// === Lock de campos durante Inline Edit/Inline Add, con reintentos y observer ===\n/*(function () {\n  // <-- CAMBIA ESTOS NOMBRES POR LOS TUYOS\n  var READONLY_FIELDS = ['idcliente','fecha','descripcion'];\n\n  // --- utilidades ---\n  function lockOne(field, rowid){\n    var c = Runner.getControl(pageid, field, rowid);\n    if(!c) return;\n    var $inp = $('#'+c.getInputId());\n    if(!$inp.length) return;\n\n    if ($inp.is('select')) {\n      $inp.prop('disabled', true);\n      $inp.closest('.select2-container').css('pointer-events','none').addClass('opacity-75');\n    } else if ($inp.is(':checkbox, :radio')) {\n      $inp.prop('disabled', true);\n    } else {\n      $inp.prop('readonly', true).addClass('bg-light');\n      // evita edición por teclado\n      $inp.off('.ro').on('keydown.ro input.ro', function(e){ e.preventDefault(); });\n    }\n    // desactivar iconos/widget adyacentes (datepicker, etc.)\n    $inp.closest('.rnr-edit-field, .r-edit-field')\n        .find('.rnr-dp-control, .glyphicon-calendar, .fa-calendar')\n        .css('pointer-events','none').addClass('disabled');\n\n    // última barrera\n    $inp.closest('.rnr-edit-field, .r-edit-field').css('pointer-events','none').css('opacity', 0.75);\n  }\n\n  function lockRowFields(rowid){\n    READONLY_FIELDS.forEach(function(fname){ lockOne(fname, rowid); });\n    // marca la fila como “bloqueada”\n    var $row = $('.rnr-row[data-record-id=\"'+rowid+'\"]');\n    if(!$row.length) $row = $('#'+rowid);\n    $row.attr('data-ro-locked','1');\n  }\n\n  // identificar si una fila está en inline edit\n  function isInlineEditingRow($row){\n    // botones de guardar/cancelar inline presentes suelen indicar estado de edición\n    return $row.find('.rnr-inline-save, .rnr-inline-cancel').length > 0;\n  }\n\n  // aplica lock a todas las filas actualmente en inline edit\n  function scanAndLock(){\n    $('.rnr-row').each(function(){\n      var $row = $(this);\n      if (!isInlineEditingRow($row)) return;\n      if ($row.attr('data-ro-locked') === '1') return;\n\n      // tomar recId/rowid\n      var recId = $row.attr('data-record-id') || $row.attr('id');\n      if (recId) {\n        // pequeño delay por si los controles acaban de crearse\n        setTimeout(function(){ lockRowFields(recId); }, 0);\n      }\n    });\n  }\n\n  // --- ganchos de eventos ---\n  // 1) cuando el grid está listo, escanea\n  if (pageObj && typeof pageObj.on === 'function') {\n    pageObj.on('gridReady', function(){ scanAndLock(); });\n    // algunos temas disparan estos cuando se inicia inline edit/add\n    pageObj.on('afterInlineEditRow', function(rowid){ setTimeout(function(){ lockRowFields(rowid); }, 0); });\n    pageObj.on('afterInlineAddRow',  function(rowid){ setTimeout(function(){ lockRowFields(rowid); }, 0); });\n  }\n\n  // 2) delega clicks en botones de inline edit/add para reintentar\n  $(document).on('click', '.rnr-inlineedit, .rnr-inlineadd, .rnr-ie, [data-button=inline_edit], [data-button=inline_add]', function(){\n    setTimeout(scanAndLock, 50);\n  });\n\n  // 3) observa el contenedor del grid: si re-renderiza, volvemos a aplicar\n  var grid = document.querySelector('.rnr-grid, .grid, .bs-grid');\n  if (grid) {\n    var mo = new MutationObserver(function(){ setTimeout(scanAndLock, 0); });\n    mo.observe(grid, {childList:true, subtree:true});\n  }\n\n  // 4) plan B: escaneo periódico corto (por si algún caso extremo se escapa)\n  var tries = 0, timer = setInterval(function(){\n    scanAndLock();\n    if (++tries > 20) clearInterval(timer); // ~6–10 s según tu preferencia\n  }, 300);\n})();\n*/\n\n"
		},
		{
			"eventId": "EVENT_AFTEREDIT",
			"pageType": "edit",
			"code": "\n\n//**********  Check if specific record exists  ************  \n$ids = (int)$keys['idsolicitud'];\nif ((int)$values['estatusentrega']==2) {\n    $rs = DB::Query(\"select * from ventas where idsolicitud=\". $ids);\n    $data=$rs->fetchAssoc(); \n    if($data) {  \n        // if record exists do something \n    } else {  \n        $data = array(); \n        $data[\"idtipoventa\"] = $values['idtipoventa']; \n        $data[\"fecha\"] = date('Y-m-d'); \n        $data[\"idcliente\"] = $values['idcliente']; \n        $data[\"esnimei\"] = $values['equipo'];   \n        $data[\"simcard\"] = $values['chip'];   \n        $data[\"usuario\"] = $values['usuario'];   \n        $data[\"tienda\"] = $values['idtienda'];   \n        $data[\"idsolicitud\"] = $values['idsolicitud'];   \n        $data[\"orden\"] = $values['orden'];   \n        $data[\"plazo\"] = $values['plazo'];   \n        $data[\"plan\"] = $values['idplan'];   \n        $data[\"equipoincluido\"] = 1;   \n\n\n        \n        DB::Insert(\"ventas\", $data );\n    // if dont exist do something else \n    }\n\n}\n\n\n\n\n"
		},
		{
			"eventId": "EVENT_BEFOREMOVENEXT_LIST",
			"pageType": "list",
			"code": "// $data = registro actual; $row = atributos HTML de la fila\r\n$st = (int)$data[\"estatusentrega\"];  // 2=Entregada, 3=Rechazada (ajusta si difiere)\r\nswitch ($st) {\r\n  case 2:  $cls = 'table-success'; break; // Entregada\r\n  case 3:  $cls = 'table-danger';  break; // Rechazada\r\n  default: $cls = 'table-warning';        // No entregada / otros\r\n}\r\n\r\nif (!isset($row[\"rowattrs\"])) $row[\"rowattrs\"] = '';\r\n$row[\"rowattrs\"] .= ' class=\"'.$cls.'\"';\r\n\r\nif($data['estatusentrega'] == 3){\r\n    $record[\"css\"] = 'background:#FF3A30';\r\n    $record['fecha_css'] = 'color:white';\r\n    $record['idcliente_css'] = 'color:white';\r\n    $record['descripcion_css'] = 'color:white';\r\n    $record['estatus_css'] = 'color:white';\r\n    $record['plazo_css'] = 'color:white';\r\n    $record['orden_css'] = 'color:white';\r\n    $record['maps_url_css'] = 'color:white';\r\n    $record['estatusentrega_css'] = 'color:white';\r\n    $record['equipo_css'] = 'color:white';\r\n    $record['chip_css'] = 'color:white';\r\n}\r\n"
		},
		{
			"eventId": "EVENT_BEFORESHOW_EDIT",
			"pageType": "edit",
			"code": "// Place event code here.\n// Use \"Add Action\" button to add code snippets.\n\n\n// Edit page -> Before display\n// Guarda el producto actual en sesión para el SQL del lookup\n$_SESSION[\"IDACTUAL\"] = isset($values[\"idproducto\"]) ? (int)$values[\"idproducto\"] : 0;\n\n\n\n\n\n"
		},
		{
			"eventId": "EVENT_BEFOREQUERY_LIST",
			"pageType": "list",
			"code": "\nswitch (true) {\n\n\t//case ($_SESSION[\"Acceso\"]===0 OR strtoupper($_SESSION['UserID'])=='ADMIN'):\n\tcase ( strtoupper($_SESSION['UserID'])=='ADMIN'):\n\t\t\t\t\tbreak;\n\t\tcase (strtoupper($_SESSION[\"Label\"])=='VALIDADOR'):\n    //   $strWhereClause=WhereAdd($strWhereClause,\"solicitudes.idtipoventa in (1,11,21,22)\");\n\t       break;\n\t\t\t\n\t\t\tcase ($_SESSION[\"Acceso\"]==1):\n       $strWhereClause=WhereAdd($strWhereClause,\"/*solicitudes.idtipoventa not in (1,11,21,22) and*/ solicitudes.idtienda=\".$_SESSION[\"Tienda\"]); /*solicitado por Diego*/\n \n        break;\n  /* case ($_SESSION[\"Acceso\"]==2):\n\t\t\t\t\n         $strWhereClause=WhereAdd($strWhereClause,\"solicitudes.idtipoventa>1 AND solicitudes.idtienda=\".$_SESSION[\"Tienda\"]);\n        break;*/\n    case ($_SESSION[\"Acceso\"]===10 ):\n        $strWhereClause=whereAdd($strWhereClause,\" solicitudes.idtienda in (\nselect distinct t.idtienda from tiendas t inner join\n userssectores us on t.idsector=us.idsector\n where username='\".$_SESSION[\"UserID\"].\"')\");\n        break;\n\t\tdefault:\n\t\t\t\t$strWhereClause=whereAdd($strWhereClause,\"solicitudes.usuario='\".$_SESSION['UserID'].\"'\");\n\t\t\t\tbreak;\n}\n\n\n\n\n\n\n\n// 1) Tomar fechas en este orden de prioridad: GET -> SESSION -> defaults\n$in  = isset($_GET['FechaIn']) ? $_GET['FechaIn'] : ( isset($_SESSION['FechaIn']) ? $_SESSION['FechaIn'] : date('Y-m-d', strtotime('-30 days')) );\n$fn  = isset($_GET['FechaFn']) ? $_GET['FechaFn'] : ( isset($_SESSION['FechaFn']) ? $_SESSION['FechaFn'] : date('Y-m-d') );\n\n// 2) Validar formato (YYYY-MM-DD); si no es válido, poner defaults\n$check = function($d){\n    $dt = DateTime::createFromFormat('Y-m-d', $d);\n    return $dt && $dt->format('Y-m-d') === $d;\n};\nif( !$check($in) ) $in = date('Y-m-d', strtotime('-30 days'));\nif( !$check($fn) ) $fn = date('Y-m-d');\n\n// 3) Si el usuario invirtió el rango, corregir (swap)\nif( $in > $fn ){\n    $tmp = $in; $in = $fn; $fn = $tmp;\n}\n\n// 4) Guardar en sesión (para siguientes cargas)\n$_SESSION['FechaIn'] = $in;\n$_SESSION['FechaFn'] = $fn;\n\n// 5) Construir el WHERE\n//    - Si tu campo 'fecha' es DATE, BETWEEN es inclusivo y esto basta.\n//    - Si fuese DATETIME y quieres incluir todo el día final, usa <= DATE_ADD($fn, INTERVAL 1 DAY)\nif( $strWhereClause != \"\" ) {\n    $strWhereClause .= \" AND \";\n}\n$strWhereClause .= \" fecha BETWEEN \" . add_db_quotes(\"fecha\", $in) . \" AND \" . add_db_quotes(\"fecha\", $fn);\n\n// Para depurar:\n// LogInfo(\"Rango aplicado: $in a $fn\");\n// LogInfo(\"WHERE: \".$strWhereClause);\n"
		},
		{
			"eventId": "EVENT_BEFORESHOW_ADD",
			"pageType": "add",
			"code": "// Place event code here.\n// Use \"Add Action\" button to add code snippets.\n\n// Valores de texto\n$pageObject->setProxyValue(\"value_ciudad_1\", \"MERIDA\");\n$pageObject->setProxyValue(\"value_estado_1\", \"YUCATAN\");\n\n// Coordenadas por defecto\n$pageObject->setProxyValue(\"value_lat_1\", \"21.1619\");\n$pageObject->setProxyValue(\"value_lng_1\", \"-89.6793\");\n"
		},
		{
			"eventId": "EVENT_BEFOREEDIT",
			"pageType": "edit",
			"code": "// Place event code here.\n// Use \"Add Action\" button to add code snippets.\n\n\nDB::Exec(\"START TRANSACTION\", $conn);\n\n\n$values[\"fecha\"]=date('Y-m-d');\n$values[\"idtienda\"]=2;  //Tienda no presencial\n$values[\"idtipoventa\"]=5; //Renovación Tradicional (Equipo y Chip)\n$values[\"estatus\"]=\"ACTUALIZADA\";\n$values[\"equipoincluido\"]=1;\n$values[\"usuario\"]=$_SESSION[\"UserID\"];\n\n\n$camposExtra = [\"nombre\",\"paterno\",\"materno\",\"estado\",\"ciudad\",\"cp\",\"calle\",\"numeroext\",\"numeroint\",\"colonia\"];\n\n\n// Helpers para armar valores seguros\nfunction q($v){               // cadenas/fechas: 'valor' o NULL\n  return (isset($v) && $v !== '' ? db_prepare_string($v) : \"NULL\");\n}\nfunction qi($v){              // enteros: número o NULL\n  return (isset($v) && $v !== '' ? (int)$v : \"NULL\");\n}\nfunction qb($v){              // booleano/bit: 0/1\n  return (!empty($v) ? 1 : 0);\n}\n\n$idsolicitud = qi($oldvalues['idsolicitud']) ;\n\n// Construcción del UPDATE\n$sqlMain = \"UPDATE solicitudes SET estatus =\" . q($values['estatus']) .\", idcliente = \". qi($values['idcliente']) .\n\", idproducto = \".qi($values['idproducto'])     .\", idplan = \".    qi($values['idplan'])         .\", orden =  \" .   q($values['orden']) .\n\", plazo = \".  qi($values['plazo']) .\", rfc = \".     q($values['rfc'])  .\", idcli = \".    qi($values['idcli']) . \" WHERE idsolicitud = \" . $idsolicitud   ;\n\nif (!DB::Exec($sqlMain, $conn)) {\n    DB::Exec(\"ROLLBACK\", $conn);\n    $message = \"No se pudo actualizar la solicitud: \".db_error($conn);\n    return false;               // el form queda con los valores\n}\n//$idsolicitud = db_insertid($conn);\n\n\n\n\n\n$extras = [];\nforeach ($camposExtra as $f) {\n    if (array_key_exists($f, $values)) {\n        $extras[$f] = $values[$f];\n        unset($values[$f]);             // <- evita \"Unknown column ...\" en el INSERT de solicitudes\n    } else {\n        // Si alguno lo pones como \"Custom field\" (no ligado a DB), recupéralo del POST:\n        $pv = postvalue($f);\n        if ($pv !== null) $extras[$f] = $pv;\n    }\n}\n\n// Guarda en sesión, indexado por el id de la página para evitar choques con otras pestañas\n$_SESSION['solicitudes_add_extras'] = $_SESSION['solicitudes_add_extras'] ?? [];\n$_SESSION['solicitudes_add_extras'][$pageObject->id] = $extras;\n\n// Continúa con el insert normal en solicitudes\n\n\n $sql = sprintf(\"DELETE FROM seriessolicitadas WHERE idsolicitud =\". $idsolicitud );\n     if (!DB::Exec($sql, $conn)) {\n        DB::Exec(\"ROLLBACK\", $conn);\n        $message = \"error en las series solicitadas: \".db_error($conn);\n        return false;               // el form NO pierde lo tecleado\n    }\n\n \n\n\n$strSQLExists=\"SELECT\ncompras.noserie\nFROM compras\nLEFT OUTER JOIN ventas v ON compras.noserie = v.esnimei\nLEFT OUTER JOIN movimientos m ON compras.noserie = m.esnimei\nLEFT OUTER JOIN seriessolicitadas ss on compras.noserie=ss.esnimei     \nLEFT OUTER JOIN (SELECT t.esnimei,t.tiendadestino,t.`fecharecepcion` FROM traspasosdet t INNER JOIN (SELECT MAX(idtraspasodet) idtraspaso FROM traspasosdet GROUP BY esnimei) t1 ON t.idtraspasodet=t1.idtraspaso) t ON compras.noserie=t.esnimei\nINNER JOIN productos ON compras.codigoproducto = productos.codigoIUSA\nWHERE   v.esnimei is null and m.esnimei is null and ss.esnimei is null and (t. esnimei is null or t.fecharecepcion is not null and t.fecharecepcion<>'0000-00-00')\n  and compras.tienda=2 and compras.clasif = 2 and productos.Clasif='Equipo' AND productos.idproducto=\". $values['idproducto']. \" LIMIT 1 \";\n$rsExists = db_query($strSQLExists,$conn);\n$data=db_fetch_array($rsExists);\n\nif (!$data)\n{\n\t\t$message=\"No existe saldo en el inventario para el producto seleccionado \". $sql;\n\treturn false;\n\n} else {\n    $_SESSION[\"esnimei\"] = $data['noserie'];\n}\n\n\n$strSQLExists=\"SELECT\ncompras.noserie\nFROM compras\nLEFT OUTER JOIN ventas v ON compras.noserie = v.esnimei\nLEFT OUTER JOIN movimientos m ON compras.noserie = m.esnimei\nLEFT OUTER JOIN seriessolicitadas ss on compras.noserie=ss.esnimei     \nLEFT OUTER JOIN (SELECT t.esnimei,t.tiendadestino,t.`fecharecepcion` FROM traspasosdet t INNER JOIN (SELECT MAX(idtraspasodet) idtraspaso FROM traspasosdet GROUP BY esnimei) t1 ON t.idtraspasodet=t1.idtraspaso) t ON compras.noserie=t.esnimei\nINNER JOIN productos ON compras.codigoproducto = productos.codigoIUSA\nWHERE   v.esnimei is null and m.esnimei is null  and ss.esnimei is null and (t. esnimei is null or t.fecharecepcion is not null and t.fecharecepcion<>'0000-00-00')\n  and compras.tienda=2 and compras.clasif = 2 and productos.Clasif='Chip' LIMIT 1 \";\n$rsExists = db_query($strSQLExists,$conn);\n$data=db_fetch_array($rsExists);\n\nif (!$data)\n{\n\t\t$message=\"No existe saldo en el inventario de simcards\";\n\treturn false;\n\n} else {\n    $_SESSION[\"simcard\"] = $data['noserie'];\n}\n\n\n$extras = $_SESSION['solicitudes_add_extras'][$pageObject->id] ?? [];\nunset($_SESSION['solicitudes_add_extras'][$pageObject->id]);\n\n// Ya tienes $keys[\"idsolicitud\"] del registro insertado en solicitudes\n//$idsolicitud = (int)$keys[\"idsolicitud\"];\n\n// EJEMPLO: insertar dirección de entrega en entregasvnp usando los extras\n$strSQLExists=\"SELECT\nidsolicitud FROM entregasvnp WHERE idsolicitud = \". $idsolicitud ;\n$rsExists = db_query($strSQLExists,$conn);\n$data=db_fetch_array($rsExists);\n\nif ($data)\n{\n\t\tif (!empty($extras)) {\n    $sql = sprintf(\n        \"UPDATE entregasvnp SET idsolicitud = \" . qi($values['idsolicitud']) . \", estado = \". db_prepare_string($extras[\"estado\"]    ?? \"\").\", ciudad = \" . db_prepare_string($extras[\"ciudad\"]    ?? \"\") .\n        \", cp = \" .db_prepare_string($extras[\"cp\"]        ?? \"\").\" , calle = \".db_prepare_string($extras[\"calle\"]     ?? \"\").\" , numeroext = \". db_prepare_string($extras[\"numeroext\"] ?? \"\") .\n        \", numeroint = \". db_prepare_string($extras[\"numeroint\"] ?? \"\") .\" , colonia = \". db_prepare_string($extras[\"colonia\"]   ?? \"\").\" WHERE idsolicitud = \". $idsolicitud ) ;\n\n    if (!DB::Exec($sql, $conn)) {\n        DB::Exec(\"ROLLBACK\", $conn);\n        $message = \"No se pudo actualizar los datos de entrega: \".db_error($conn);\n        return false;               // el form NO pierde lo tecleado\n    }\n  //  db_exec($sql, $conn);\n}\n\n} else {\n    if (!empty($extras)) {\n    $sql = sprintf(\n        \"INSERT INTO entregasvnp (idsolicitud, estado, ciudad, cp, calle, numeroext, numeroint, colonia)\n         VALUES (%d, %s, %s, %d, %s, %s, %s, %s)\",\n        $idsolicitud,\n        db_prepare_string($extras[\"estado\"]    ?? \"\"),\n        db_prepare_string($extras[\"ciudad\"]    ?? \"\"),\n        db_prepare_string($extras[\"cp\"]        ?? \"\"),\n        db_prepare_string($extras[\"calle\"]     ?? \"\"),\n        db_prepare_string($extras[\"numeroext\"] ?? \"\"),\n        db_prepare_string($extras[\"numeroint\"] ?? \"\"),\n        db_prepare_string($extras[\"colonia\"]   ?? \"\")\n    );\n    if (!DB::Exec($sql, $conn)) {\n        DB::Exec(\"ROLLBACK\", $conn);\n        $message = \"No se pudo guardar la entrega: \".db_error($conn);\n        return false;               // el form NO pierde lo tecleado\n    }\n  //  db_exec($sql, $conn);\n}\n}\n\n\n \n    $esnimei = $_SESSION[\"esnimei\"] ?? null;\n    if (!empty($esnimei)) {\n           $sql = sprintf(\n               \n            \"INSERT INTO seriessolicitadas (idsolicitud, esnimei)\n             VALUES (%d, %s)\",\n            $idsolicitud,\n            db_prepare_string($esnimei    ?? \"\")\n        );\n    if (!DB::Exec($sql, $conn)) {\n        DB::Exec(\"ROLLBACK\", $conn);\n        $message = \"No se pudo guardar el equipo: \".db_error($conn);\n        return false;               // el form NO pierde lo tecleado\n    }\n    \n    }\n    \n    $simcard = $_SESSION[\"simcard\"] ?? null;\n    if (!empty($esnimei)) {\n           $sql = sprintf(\n            \"INSERT INTO seriessolicitadas (idsolicitud, esnimei)\n             VALUES (%d, %s)\",\n            $idsolicitud,\n            db_prepare_string($simcard    ?? \"\")\n        );\n    if (!DB::Exec($sql, $conn)) {\n        DB::Exec(\"ROLLBACK\", $conn);\n        $message = \"No se pudo guardar el sincard: \".db_error($conn);\n        return false;               // el form NO pierde lo tecleado\n    }\n    \n    }\n\nDB::Exec(\"COMMIT\", $conn);\n\n// “flash message” en sesión para mostrarlo en verde tras el redirect\n$_SESSION['flash_ok'] = \"Solicitud #{$idsolicitud} guardada correctamente.\";\n\n// Redirige a la página Add (form limpio)\nheader(\"Location: \".$pageObject->shortTableName.\"_add.php?new=1\");\nexit;\n\n\n\n\nreturn false;\n"
		},
		{
			"eventId": "EVENT_BEFOREPROCESSROW_LIST",
			"pageType": "list",
			"code": "// Place event code here.\n// Use \"Add Action\" button to add code snippets.\n\n// $data = datos del registro actual\n// $record = atributos HTML de la fila (puedes modificar botones, links, etc.)\n// $pageObject = objeto de página\n\n// Events → List page → Before record processed($data, &$record, &$pageObject)\n\n// 1) Construir las keys del registro actual (soporta PK compuesta)\n\n// solicitud → List → Before record processed($data, &$record, &$pageObject)\n\n// Keys para la URL (soporta PK compuesta)\n$params = [];\n$i = 1;\nforeach( $pageObject->pSet->getTableKeys() as $pk ){\n  $params[] = \"editid\".$i.\"=\".rawurlencode($data[$pk]);\n  $i++;\n}\n$q = implode(\"&\", $params);\n\n// Decide en servidor\n$userId  = isset($_SESSION['UserID']) ? strtoupper((string)$_SESSION['UserID']) : '';\n$isAdmin = ($userId === 'ADMIN');\n\n$dest = GetTableLink(\"solicitudes\", $isAdmin ? \"edit1\" : \"edit\") . \"?\" . $q;\n\n// Edit no-popup: usa href (también seteo data-href por si el tema lo usa)\n$attr = 'href=\"'.runner_htmlspecialchars($dest).'\" data-href=\"'.runner_htmlspecialchars($dest).'\" class=\"rnr-editlink\"';\n$record[\"editlink_attrs\"]       = $attr;\n$record[\"editlink_attrs_icon\"]  = $attr;   // si el tema muestra icono aparte\n$record[\"editlink_button_attrs\"]= $attr;   // por si renderiza un botón\n"
		},
		{
			"eventId": "EVENT_BEFORESHOW_LIST",
			"pageType": "list",
			"code": "// Place event code here.\n// Use \"Add Action\" button to add code snippets.\n\n// Detecta ADMIN y otras banderas servidor-side\n// Detecta ADMIN y otras banderas servidor-side\n// --- Reglas de acceso ---\n$userId      = isset($_SESSION['UserID']) ? strtoupper((string)$_SESSION['UserID']) : '';\n$isAdmin     = ($userId === 'ADMIN');\n$isValidador = (isset($_SESSION['Label'])  && $_SESSION['Label'] === 'VALIDADOR');\n$hasAcceso   = (isset($_SESSION['Acceso']) && intval($_SESSION['Acceso']) === 1);\n\n// Cambia la condición a tu gusto:\n$allowLogistic =  $isAdmin || ($isValidador && $hasAcceso);\n\n// IMPORTANTE: usa el *itemid* real del botón en el diseñador (Builder).\n// Te recomiendo renombrarlo a \"logistic_btn\". Si en tu HTML ves data-itemid=\"custom_button\",\n// entonces cambia \"logistic_btn\" por \"custom_button\".\nif (!$allowLogistic) {\n    $pageObject->hideItem(\"logistic_btn\");   // oculta la columna/botón para ese usuario\n} else {\n    // lo exponemos por si quieres usarlo del lado cliente (opcional)\n    $pageObject->setProxyValue(\"allowLogistic\", true);\n}\n\n\n\n"
		}
	],
	"dbTableInfo": {
		"type": 0,
		"foreignKeys": [],
		"fields": [
			{
				"name": "idsolicitud",
				"type": 20,
				"size": 20,
				"scale": 0,
				"typeName": "bigint(20)",
				"nullable": false,
				"autoinc": true,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idtipoventa",
				"type": 3,
				"size": 11,
				"scale": 0,
				"typeName": "int(11)",
				"nullable": false,
				"autoinc": false,
				"defaultValueSQL": "0",
				"defaultValue": "0"
			},
			{
				"name": "fecha",
				"type": 7,
				"size": 0,
				"scale": 0,
				"typeName": "date",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "fechacaptura",
				"type": 135,
				"size": 0,
				"scale": 0,
				"typeName": "datetime",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": "current_timestamp()",
				"defaultValue": "CURRENT_TIMESTAMP"
			},
			{
				"name": "idcliente",
				"type": 3,
				"size": 11,
				"scale": 0,
				"typeName": "int(11)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idproducto",
				"type": 3,
				"size": 11,
				"scale": 0,
				"typeName": "int(11)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idplan",
				"type": 3,
				"size": 11,
				"scale": 0,
				"typeName": "int(11)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "usuario",
				"type": 200,
				"size": 20,
				"scale": 0,
				"typeName": "varchar(20)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idtienda",
				"type": 3,
				"size": 3,
				"scale": 0,
				"typeName": "int(3)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "fechamodif",
				"type": 135,
				"size": 0,
				"scale": 0,
				"typeName": "datetime",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": "current_timestamp()",
				"defaultValue": "CURRENT_TIMESTAMP"
			},
			{
				"name": "orden",
				"type": 200,
				"size": 11,
				"scale": 0,
				"typeName": "varchar(11)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "solicitudimg",
				"type": 201,
				"size": 0,
				"scale": 0,
				"typeName": "mediumtext",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "estatus",
				"type": 200,
				"size": 20,
				"scale": 0,
				"typeName": "varchar(20)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idsolrazon",
				"type": 3,
				"size": 11,
				"scale": 0,
				"typeName": "int(11)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "importeatt",
				"type": 5,
				"size": 0,
				"scale": 0,
				"typeName": "float",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "importesms",
				"type": 5,
				"size": 0,
				"scale": 0,
				"typeName": "float",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "plazo",
				"type": 2,
				"size": 6,
				"scale": 0,
				"typeName": "smallint(6)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "observaciones",
				"type": 200,
				"size": 200,
				"scale": 0,
				"typeName": "varchar(200)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "equipoincluido",
				"type": 16,
				"size": 1,
				"scale": 0,
				"typeName": "tinyint(1)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "rfc",
				"type": 200,
				"size": 20,
				"scale": 0,
				"typeName": "varchar(20)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idtratamiento",
				"type": 3,
				"size": 2,
				"scale": 0,
				"typeName": "int(2)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "riesgo",
				"type": 200,
				"size": 1,
				"scale": 0,
				"typeName": "char(1)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "observacionest",
				"type": 200,
				"size": 200,
				"scale": 0,
				"typeName": "varchar(200)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idcli",
				"type": 200,
				"size": 9,
				"scale": 0,
				"typeName": "varchar(9)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "fecha1avta",
				"type": 7,
				"size": 0,
				"scale": 0,
				"typeName": "date",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idplan1avta",
				"type": 3,
				"size": 11,
				"scale": 0,
				"typeName": "int(11)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "dn1avta",
				"type": 200,
				"size": 10,
				"scale": 0,
				"typeName": "varchar(10)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idproceso",
				"type": 16,
				"size": 2,
				"scale": 0,
				"typeName": "tinyint(2)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "idorigenventa",
				"type": 3,
				"size": 11,
				"scale": 0,
				"typeName": "int(11)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			},
			{
				"name": "estatusentrega",
				"type": 3,
				"size": 11,
				"scale": 0,
				"typeName": "int(11)",
				"nullable": true,
				"autoinc": false,
				"defaultValueSQL": null,
				"defaultValue": ""
			}
		],
		"primaryKeys": [
			"idsolicitud"
		],
		"uniqueFields": [],
		"name": "solicitudes"
	},
	"pages": [
		{
			"id": "add",
			"type": "add",
			"layoutId": "nomenu",
			"disabled": false,
			"default": 0,
			"forms": {
				"above-grid": {
					"modelId": "add-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						},
						{
							"cells": [
								{
									"cell": "c2"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"add_message"
							]
						},
						"c2": {
							"model": "c2",
							"items": [
								"step_nav"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"below-grid": {
					"modelId": "add-below-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"next_step",
								"add_save",
								"add_reset",
								"add_back_list",
								"add_cancel"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "add-header",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"add_header"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c3",
									"rowspan": 1
								},
								{
									"cell": "c",
									"rowspan": 1
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c3": {
							"model": "c3",
							"items": [
								"section"
							],
							"border": [
								{
									"side": "",
									"width": "0"
								}
							],
							"padding": {
								"right": "10px"
							}
						},
						"c": {
							"model": "c3",
							"items": [
								"section1"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				},
				"section": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"integrated_edit_field3",
								"integrated_edit_field4",
								"integrated_edit_field5",
								"integrated_edit_field1",
								"integrated_edit_field6",
								"integrated_edit_field9"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				},
				"section1": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"integrated_edit_field",
								"integrated_edit_field2",
								"integrated_edit_field7",
								"integrated_edit_field8"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				},
				"step2": {
					"modelId": "simple-edit",
					"grid": [
						{
							"section": "",
							"cells": [
								{
									"cell": "c",
									"colspan": 2
								}
							]
						},
						{
							"section": "",
							"cells": [
								{
									"cell": "c2"
								},
								{
									"cell": "c4"
								}
							]
						}
					],
					"cells": {
						"c": {
							"model": "c1",
							"items": [
								"text"
							],
							"align": "center"
						},
						"c2": {
							"model": "c1",
							"items": [
								"integrated_edit_field13",
								"integrated_edit_field14",
								"integrated_edit_field15",
								"integrated_edit_field16"
							]
						},
						"c4": {
							"model": "c1",
							"items": [
								"integrated_edit_field11",
								"integrated_edit_field10",
								"integrated_edit_field12",
								"integrated_edit_field17",
								"integrated_edit_field18"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				}
			},
			"items": {
				"add_header": {
					"type": "add_header"
				},
				"add_back_list": {
					"type": "add_back_list"
				},
				"add_cancel": {
					"type": "add_cancel"
				},
				"add_message": {
					"type": "add_message"
				},
				"add_save": {
					"type": "add_save"
				},
				"add_reset": {
					"type": "add_reset"
				},
				"integrated_edit_field3": {
					"field": "idcliente",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "idcliente",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field": {
					"field": "idproducto",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "idproducto",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field2": {
					"field": "idplan",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "idplan",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field1": {
					"field": "nombre",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "nombre",
						"table": "solicitudes",
						"type": 5
					},
					"label": {
						"field": "nombre",
						"table": "solicitudes",
						"type": 3
					}
				},
				"integrated_edit_field4": {
					"field": "paterno",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "paterno",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field5": {
					"field": "materno",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "materno",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field6": {
					"field": "rfc",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field7": {
					"field": "orden",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "orden",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field8": {
					"field": "plazo",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "plazo",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field9": {
					"field": "idcli",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"section": {
					"type": "section",
					"title": {
						"type": 0,
						"text": "Datos del cliente"
					},
					"location": "section",
					"bsStyle": "default",
					"panelType": 3,
					"headerBg": "#a0dcf5",
					"headerColor": "",
					"bodyBg": "",
					"bodyColor": "",
					"panelBorder": null,
					"borderColor": ""
				},
				"section1": {
					"type": "section",
					"title": {
						"type": 0,
						"text": "Datos de la solicitud"
					},
					"location": "section1",
					"bsStyle": "default",
					"panelType": 3,
					"headerBg": "#72d6f9",
					"headerColor": "",
					"bodyBg": "",
					"bodyColor": "",
					"panelBorder": null,
					"borderColor": ""
				},
				"integrated_edit_field10": {
					"field": "estado",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field11": {
					"field": "ciudad",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field12": {
					"field": "cp",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field13": {
					"field": "calle",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field14": {
					"field": "numeroext",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field15": {
					"field": "numeroint",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field16": {
					"field": "colonia",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"text": {
					"type": "text",
					"label": {
						"text": "<div id=\"map\" style=\"height: 400px; width: 100%; margin-bottom: 10px; border: 1px solid #ccc;\"></div>\n<p><strong>Haz clic en el mapa para obtener los datos de la ubicación (si algún campo no se acompleta automáticamente, favor de escribirlo)</strong></p>\n\n<!-- Cargar Leaflet CSS & JS -->\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n<script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n\n<script>\n// Variables globales\nlet map;\nlet marker;\nlet mapInitialized = false;\n\nfunction initMap() {\n    if (mapInitialized) {\n        setTimeout(() => map.invalidateSize(), 100);\n        return;\n    }\n    \n    const initialLocation = [21.0038, -89.6183];\n    map = L.map('map').setView(initialLocation, 12);\n    \n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n    \n    mapInitialized = true;\n    \n    map.on('click', function(e) {\n        placeMarkerAndGeocode(e.latlng);\n    });\n    \n    setTimeout(() => map.invalidateSize(), 300);\n}\n\nfunction placeMarkerAndGeocode(latlng) {\n    if (marker) map.removeLayer(marker);\n    marker = L.marker(latlng).addTo(map);\n    map.setView(latlng, map.getZoom());\n    \n    var apiUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latlng.lat}&lon=${latlng.lng}&zoom=18&addressdetails=1`;\n    \n    fetch(apiUrl)\n        .then(response => response.json())\n        .then(data => {\n            if (data && data.address) {\n                populateAddressFields(data.address, latlng, data.display_name);\n            } else {\n                alert('No se encontraron resultados para esta ubicación.');\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            alert('Falló la geocodificación.');\n        });\n}\n\n// 🔥 NUEVA FUNCIÓN: Extraer número de dirección\nfunction extractHouseNumber(fullAddress, roadName) {\n    if (!fullAddress || !roadName) return '';\n    \n    // Buscar patrones comunes de números\n    const patterns = [\n        /(?:No\\.|Num|#)\\s*(\\d+)/i,    // No. 366, Num 366, #366\n        /(\\d+)\\s*(?:#|No\\.|Num)/i,     // 366 #, 366 No.\n        /(\\d+)\\s*[-–]\\s*\\d+/i,         // 366-368\n        /(\\d+)[a-zA-Z]?$/i,            // 366, 366A\n        /^(\\d+)\\s+/i                   // 366 Calle 30\n    ];\n    \n    for (const pattern of patterns) {\n        const match = fullAddress.match(pattern);\n        if (match && match[1]) {\n            return match[1];\n        }\n    }\n    \n    // Si no se encuentra con patrones, intentar con el campo house_number de Nominatim\n    return '';\n}\n\nfunction populateAddressFields(address, latlng, fullAddress = '') {\n    // Extraer el número de casa\n    const houseNumber = address.house_number || extractHouseNumber(fullAddress, address.road);\n    \n    // Llenar los campos del formulario\n    document.getElementById('value_estado_1').value = address.state || '';\n    document.getElementById('value_ciudad_1').value = address.city || address.town || address.village || '';\n    document.getElementById('value_cp_1').value = address.postcode || '';\n    document.getElementById('value_colonia_1').value = address.suburb || address.neighbourhood || '';\n    document.getElementById('value_calle_1').value = address.road || '';\n    \n    // 🔥 NUEVO: Llenar el número exterior\n    document.getElementById('value_numeroext_1').value = houseNumber;\n    \n    document.getElementById('value_lat_1').value = latlng.lat;\n    document.getElementById('value_lng_1').value = latlng.lng;\n    \n    console.log('Datos completos de Nominatim:', address);\n    console.log('Dirección completa:', fullAddress);\n    console.log('Número extraído:', houseNumber);\n}\n\n// 🔥 OBSERVAR CUANDO EL TAB Y SECTION SE HACEN VISIBLES\nfunction checkMapContainer() {\n    const mapContainer = document.getElementById('map');\n    if (mapContainer.offsetParent !== null && mapContainer.offsetWidth > 0) {\n        initMap();\n        return true;\n    }\n    return false;\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    const interval = setInterval(() => {\n        if (checkMapContainer()) {\n            clearInterval(interval);\n        }\n    }, 200);\n    \n    document.body.addEventListener('click', function(e) {\n        if (e.target.closest('[data-toggle=\"tab\"], .step-tab, .nav-link')) {\n            setTimeout(() => {\n                if (mapInitialized) map.invalidateSize();\n                else if (checkMapContainer()) console.log('Mapa inicializado desde click en tab');\n            }, 400);\n        }\n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (mapInitialized) setTimeout(() => map.invalidateSize(), 100);\n});\n\nconst observer = new MutationObserver(function(mutations) {\n    mutations.forEach(function(mutation) {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'style') {\n            setTimeout(() => {\n                if (mapInitialized) map.invalidateSize();\n            }, 200);\n        }\n    });\n});\n\nsetTimeout(() => {\n    const mapContainer = document.getElementById('map');\n    if (mapContainer) {\n        observer.observe(mapContainer, { attributes: true, attributeFilter: ['style'] });\n    }\n}, 1000);\n</script>\n\n\n\n\n\n\n<script>\n(function(){\n  // ====== HELPERS ======\n  const $id = (id) => document.getElementById(id);\n  const safeTrim = (v) => (v || '').toString().trim();\n\n  function buildAddressFromFields(){\n    const calle   = safeTrim($id('value_calle_1')?.value);\n    const numero  = safeTrim($id('value_numeroext_1')?.value);\n    const col     = safeTrim($id('value_colonia_1')?.value);\n    const ciudad  = safeTrim($id('value_ciudad_1')?.value);\n    const estado  = safeTrim($id('value_estado_1')?.value);\n    const cp      = safeTrim($id('value_cp_1')?.value);\n    const parts = [\n      numero && calle ? `${calle} ${numero}` : calle || '',\n      col, ciudad, estado, cp, 'México'\n    ].filter(Boolean);\n    return parts.join(', ');\n  }\n\n  function updateMarkerAndView(lat, lng, zoomIfNeeded = false){\n    if (!mapInitialized) initMap();\n    const latlng = L.latLng(lat, lng);\n    if (marker) { marker.setLatLng(latlng); }\n    else { marker = L.marker(latlng).addTo(map); }\n    if (zoomIfNeeded) map.setView(latlng, 17); else map.panTo(latlng);\n  }\n\n  function isValidLatLng(lat, lng){\n    const nlat = Number(lat), nlng = Number(lng);\n    return Number.isFinite(nlat) && Number.isFinite(nlng)\n      && nlat <= 90 && nlat >= -90 && nlng <= 180 && nlng >= -180;\n  }\n\n  function debounce(fn, ms){\n    let t; return function(...args){ clearTimeout(t); t = setTimeout(() => fn.apply(this, args), ms); };\n  }\n\n  async function geocodeAddressAndUpdate(){\n    const q = buildAddressFromFields();\n    if (!q) return;\n    const url = `https://nominatim.openstreetmap.org/search?format=json&addressdetails=1&limit=1&countrycodes=mx&q=${encodeURIComponent(q)}`;\n    try {\n      const resp = await fetch(url, { headers: { 'Accept': 'application/json' } });\n      const data = await resp.json();\n      if (Array.isArray(data) && data.length > 0){\n        const best = data[0];\n        const lat = parseFloat(best.lat), lon = parseFloat(best.lon);\n        if (isValidLatLng(lat, lon)){\n          if ($id('value_lat_1')) $id('value_lat_1').value = lat;\n          if ($id('value_lng_1')) $id('value_lng_1').value = lon;\n          updateMarkerAndView(lat, lon, true);\n        }\n      } else {\n        console.warn('No hubo resultados para:', q);\n      }\n    } catch (e) {\n      console.error('Error geocodificando:', e);\n    }\n  }\n\n  function attachFieldListeners(){\n    const onLatLngChange = debounce(() => {\n      const lat = safeTrim($id('value_lat_1')?.value);\n      const lng = safeTrim($id('value_lng_1')?.value);\n      if (isValidLatLng(lat, lng)) updateMarkerAndView(Number(lat), Number(lng), true);\n    }, 300);\n    ['value_lat_1','value_lng_1'].forEach(id => {\n      const el = $id(id); if (!el) return;\n      el.addEventListener('input', onLatLngChange);\n      el.addEventListener('blur',  onLatLngChange);\n    });\n\n    const onAddressChange = debounce(() => { geocodeAddressAndUpdate(); }, 600);\n    ['value_calle_1','value_numeroext_1','value_colonia_1','value_ciudad_1','value_estado_1','value_cp_1']\n      .forEach(id => {\n        const el = $id(id); if (!el) return;\n        el.addEventListener('input', onAddressChange);\n        el.addEventListener('blur',  onAddressChange);\n      });\n  }\n\n  document.addEventListener('DOMContentLoaded', () => {\n    attachFieldListeners();\n    const lat = safeTrim($id('value_lat_1')?.value);\n    const lng = safeTrim($id('value_lng_1')?.value);\n    if (isValidLatLng(lat, lng)){\n      updateMarkerAndView(Number(lat), Number(lng), true);\n    } else {\n      const anyAddress =\n        safeTrim($id('value_calle_1')?.value) ||\n        safeTrim($id('value_colonia_1')?.value) ||\n        safeTrim($id('value_ciudad_1')?.value) ||\n        safeTrim($id('value_estado_1')?.value) ||\n        safeTrim($id('value_cp_1')?.value);\n      if (anyAddress) geocodeAddressAndUpdate();\n    }\n  });\n})();\n</script>\n",
						"type": 0
					},
					"editedByRte": false
				},
				"next_step": {
					"type": "next_step"
				},
				"step_nav": {
					"type": "step_nav"
				},
				"integrated_edit_field17": {
					"field": "lat",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field18": {
					"field": "lng",
					"type": "integrated_edit_field",
					"orientation": 0
				}
			},
			"dbProps": {},
			"steps": [
				{
					"location": "grid",
					"label": {
						"text": "Datos iniciales",
						"type": 0
					}
				},
				{
					"location": "step2",
					"label": {
						"text": "Datos de la Entrega",
						"type": 0
					}
				}
			],
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {}
		},
		{
			"id": "export",
			"type": "export",
			"layoutId": "first",
			"disabled": false,
			"default": 0,
			"forms": {
				"supertop": {
					"modelId": "panel-top",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "export-header",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"export_header"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "export-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"export_field",
								"export_field1",
								"export_field2"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"footer": {
					"modelId": "export-footer",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								},
								{
									"cell": "c2"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						},
						"c2": {
							"model": "c2",
							"items": [
								"export_export",
								"export_cancel"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				}
			},
			"items": {
				"export_header": {
					"type": "export_header"
				},
				"export_export": {
					"type": "export_export"
				},
				"export_cancel": {
					"type": "export_cancel"
				},
				"export_field": {
					"field": "direccion",
					"type": "export_field"
				},
				"export_field1": {
					"field": "lat",
					"type": "export_field"
				},
				"export_field2": {
					"field": "lng",
					"type": "export_field"
				}
			},
			"dbProps": {},
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {},
			"exportFormat": 2,
			"exportDelimiter": ",",
			"exportSelectDelimiter": false,
			"exportSelectFields": false
		},
		{
			"id": "import",
			"type": "import",
			"layoutId": "first",
			"disabled": true,
			"default": 0,
			"forms": {
				"supertop": {
					"modelId": "panel-top",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "import-header",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"import_header"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "import-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				}
			},
			"items": {
				"import_header": {
					"type": "import_header"
				}
			},
			"dbProps": {},
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {}
		},
		{
			"id": "edit",
			"type": "edit",
			"layoutId": "nomenu",
			"disabled": false,
			"default": 7,
			"forms": {
				"above-grid": {
					"modelId": "edit-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						},
						{
							"cells": [
								{
									"cell": "c2"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"edit_message",
								"snippet"
							]
						},
						"c2": {
							"model": "c2",
							"items": [
								"step_nav"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"below-grid": {
					"modelId": "edit-below-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								},
								{
									"cell": "c2"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"next_step",
								"edit_save",
								"edit_back_list",
								"edit_close"
							]
						},
						"c2": {
							"model": "c2",
							"items": [
								"hamburger"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "edit-header",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"edit_header"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c3",
									"rowspan": 1
								},
								{
									"cell": "c",
									"rowspan": 1
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c3": {
							"model": "c3",
							"items": [
								"section"
							],
							"border": [
								{
									"side": "",
									"width": "0"
								}
							],
							"padding": {
								"right": "10px"
							}
						},
						"c": {
							"model": "c3",
							"items": [
								"section1"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				},
				"section": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"integrated_edit_field3",
								"integrated_edit_field4",
								"integrated_edit_field5",
								"integrated_edit_field1",
								"integrated_edit_field6",
								"integrated_edit_field9"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				},
				"section1": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"integrated_edit_field",
								"integrated_edit_field2",
								"integrated_edit_field7",
								"integrated_edit_field8"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				},
				"step2": {
					"modelId": "simple-edit",
					"grid": [
						{
							"section": "",
							"cells": [
								{
									"cell": "c",
									"colspan": 2
								}
							]
						},
						{
							"section": "",
							"cells": [
								{
									"cell": "c2"
								},
								{
									"cell": "c4"
								}
							]
						},
						{
							"cells": [
								{
									"cell": "c3",
									"colspan": 2
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c": {
							"model": "c1",
							"items": [
								"text"
							],
							"align": "center"
						},
						"c2": {
							"model": "c1",
							"items": [
								"integrated_edit_field13",
								"integrated_edit_field14",
								"integrated_edit_field15",
								"integrated_edit_field16"
							]
						},
						"c4": {
							"model": "c1",
							"items": [
								"integrated_edit_field11",
								"integrated_edit_field10",
								"integrated_edit_field12",
								"integrated_edit_field17",
								"integrated_edit_field18"
							]
						},
						"c3": {
							"model": "c3",
							"items": []
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				}
			},
			"items": {
				"edit_header": {
					"type": "edit_header"
				},
				"hamburger": {
					"type": "hamburger",
					"items": [
						"edit_reset",
						"edit_view"
					]
				},
				"edit_reset": {
					"type": "edit_reset"
				},
				"edit_message": {
					"type": "edit_message"
				},
				"edit_save": {
					"type": "edit_save"
				},
				"edit_back_list": {
					"type": "edit_back_list"
				},
				"edit_close": {
					"type": "edit_close"
				},
				"edit_view": {
					"type": "edit_view"
				},
				"section": {
					"type": "section",
					"title": {
						"type": 0,
						"text": "Datos del cliente"
					},
					"location": "section",
					"bsStyle": "default",
					"panelType": 3,
					"headerBg": "#a0dcf5",
					"headerColor": "",
					"bodyBg": "",
					"bodyColor": "",
					"panelBorder": null,
					"borderColor": ""
				},
				"integrated_edit_field3": {
					"field": "idcliente",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "idcliente",
						"table": "solicitudes",
						"type": 5
					},
					"updateOnEdit": false
				},
				"integrated_edit_field4": {
					"field": "paterno",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "paterno",
						"table": "solicitudes",
						"type": 5
					},
					"updateOnEdit": false
				},
				"integrated_edit_field5": {
					"field": "materno",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "materno",
						"table": "solicitudes",
						"type": 5
					},
					"updateOnEdit": false
				},
				"integrated_edit_field1": {
					"field": "nombre",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "nombre",
						"table": "solicitudes",
						"type": 5
					},
					"label": {
						"field": "nombre",
						"table": "solicitudes",
						"type": 3
					},
					"updateOnEdit": false
				},
				"integrated_edit_field6": {
					"field": "rfc",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"integrated_edit_field9": {
					"field": "idcli",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"section1": {
					"type": "section",
					"title": {
						"type": 0,
						"text": "Datos de la solicitud"
					},
					"location": "section1",
					"bsStyle": "default",
					"panelType": 3,
					"headerBg": "#72d6f9",
					"headerColor": "",
					"bodyBg": "",
					"bodyColor": "",
					"panelBorder": null,
					"borderColor": ""
				},
				"integrated_edit_field": {
					"field": "idproducto",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "idproducto",
						"table": "solicitudes",
						"type": 5
					},
					"updateOnEdit": false
				},
				"integrated_edit_field2": {
					"field": "idplan",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "idplan",
						"table": "solicitudes",
						"type": 5
					},
					"updateOnEdit": false
				},
				"integrated_edit_field7": {
					"field": "orden",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "orden",
						"table": "solicitudes",
						"type": 5
					},
					"updateOnEdit": false
				},
				"integrated_edit_field8": {
					"field": "plazo",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "plazo",
						"table": "solicitudes",
						"type": 5
					},
					"updateOnEdit": false
				},
				"integrated_edit_field13": {
					"field": "calle",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"integrated_edit_field14": {
					"field": "numeroext",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"integrated_edit_field15": {
					"field": "numeroint",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"integrated_edit_field16": {
					"field": "colonia",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"integrated_edit_field11": {
					"field": "ciudad",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"integrated_edit_field10": {
					"field": "estado",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"integrated_edit_field12": {
					"field": "cp",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"text": {
					"type": "text",
					"label": {
						"text": "<div id=\"map\" style=\"height: 400px; width: 100%; margin-bottom: 10px; border: 1px solid #ccc;\"></div>\n<p><strong>Haz clic en el mapa para obtener los datos de la ubicación (si algún campo no se acompleta automáticamente, favor de escribirlo)</strong></p>\n\n<!-- Cargar Leaflet CSS & JS -->\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n<script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n\n<script>\n// Variables globales\nlet map;\nlet marker;\nlet mapInitialized = false;\n\nfunction initMap() {\n    if (mapInitialized) {\n        setTimeout(() => map.invalidateSize(), 100);\n        return;\n    }\n    \n    const initialLocation = [21.0038, -89.6183];\n    map = L.map('map').setView(initialLocation, 12);\n    \n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n    \n    mapInitialized = true;\n    \n    map.on('click', function(e) {\n        placeMarkerAndGeocode(e.latlng);\n    });\n    \n    setTimeout(() => map.invalidateSize(), 300);\n}\n\nfunction placeMarkerAndGeocode(latlng) {\n    if (marker) map.removeLayer(marker);\n    marker = L.marker(latlng).addTo(map);\n    map.setView(latlng, map.getZoom());\n    \n    var apiUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latlng.lat}&lon=${latlng.lng}&zoom=18&addressdetails=1`;\n    \n    fetch(apiUrl)\n        .then(response => response.json())\n        .then(data => {\n            if (data && data.address) {\n                populateAddressFields(data.address, latlng, data.display_name);\n            } else {\n                alert('No se encontraron resultados para esta ubicación.');\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            alert('Falló la geocodificación.');\n        });\n}\n\n// 🔥 NUEVA FUNCIÓN: Extraer número de dirección\nfunction extractHouseNumber(fullAddress, roadName) {\n    if (!fullAddress || !roadName) return '';\n    \n    // Buscar patrones comunes de números\n    const patterns = [\n        /(?:No\\.|Num|#)\\s*(\\d+)/i,    // No. 366, Num 366, #366\n        /(\\d+)\\s*(?:#|No\\.|Num)/i,     // 366 #, 366 No.\n        /(\\d+)\\s*[-–]\\s*\\d+/i,         // 366-368\n        /(\\d+)[a-zA-Z]?$/i,            // 366, 366A\n        /^(\\d+)\\s+/i                   // 366 Calle 30\n    ];\n    \n    for (const pattern of patterns) {\n        const match = fullAddress.match(pattern);\n        if (match && match[1]) {\n            return match[1];\n        }\n    }\n    \n    // Si no se encuentra con patrones, intentar con el campo house_number de Nominatim\n    return '';\n}\n\nfunction populateAddressFields(address, latlng, fullAddress = '') {\n    // Extraer el número de casa\n    const houseNumber = address.house_number || extractHouseNumber(fullAddress, address.road);\n    \n    // Llenar los campos del formulario\n    document.getElementById('value_estado_1').value = address.state || '';\n    document.getElementById('value_ciudad_1').value = address.city || address.town || address.village || '';\n    document.getElementById('value_cp_1').value = address.postcode || '';\n    document.getElementById('value_colonia_1').value = address.suburb || address.neighbourhood || '';\n    document.getElementById('value_calle_1').value = address.road || '';\n    \n    // 🔥 NUEVO: Llenar el número exterior\n    document.getElementById('value_numeroext_1').value = houseNumber;\n    \n    document.getElementById('value_lat_1').value = latlng.lat;\n    document.getElementById('value_lng_1').value = latlng.lng;\n    \n    console.log('Datos completos de Nominatim:', address);\n    console.log('Dirección completa:', fullAddress);\n    console.log('Número extraído:', houseNumber);\n}\n\n// 🔥 OBSERVAR CUANDO EL TAB Y SECTION SE HACEN VISIBLES\nfunction checkMapContainer() {\n    const mapContainer = document.getElementById('map');\n    if (mapContainer.offsetParent !== null && mapContainer.offsetWidth > 0) {\n        initMap();\n        return true;\n    }\n    return false;\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    const interval = setInterval(() => {\n        if (checkMapContainer()) {\n            clearInterval(interval);\n        }\n    }, 200);\n    \n    document.body.addEventListener('click', function(e) {\n        if (e.target.closest('[data-toggle=\"tab\"], .step-tab, .nav-link')) {\n            setTimeout(() => {\n                if (mapInitialized) map.invalidateSize();\n                else if (checkMapContainer()) console.log('Mapa inicializado desde click en tab');\n            }, 400);\n        }\n    });\n});\n\nwindow.addEventListener('resize', () => {\n    if (mapInitialized) setTimeout(() => map.invalidateSize(), 100);\n});\n\nconst observer = new MutationObserver(function(mutations) {\n    mutations.forEach(function(mutation) {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'style') {\n            setTimeout(() => {\n                if (mapInitialized) map.invalidateSize();\n            }, 200);\n        }\n    });\n});\n\nsetTimeout(() => {\n    const mapContainer = document.getElementById('map');\n    if (mapContainer) {\n        observer.observe(mapContainer, { attributes: true, attributeFilter: ['style'] });\n    }\n}, 1000);\n</script>\n\n\n\n\n\n\n\n\n\n<script>\n(function(){\n  // ========= IDs DE TUS CAMPOS =========\n  const IDS = {\n    calle:   'value_calle_1',\n    numext:  'value_numeroext_1',   // opcional\n    numint:  'value_numint_1',      // opcional\n    colonia: 'value_colonia_1',\n    ciudad:  'value_ciudad_1',\n    estado:  'value_estado_1',\n    cp:      'value_cp_1',\n    lat:     'value_lat_1',\n    lng:     'value_lng_1'\n  };\n\n  // ========= HELPERS =========\n  const $id = (id) => document.getElementById(id);\n  const safeTrim = (v) => (v || '').toString().trim();\n  const isValidLatLng = (lat, lng) => {\n    const a = Number(lat), b = Number(lng);\n    return Number.isFinite(a) && Number.isFinite(b) && a<=90 && a>=-90 && b<=180 && b>=-180;\n  };\n\n  function invalidateCoordsAndMarker(){\n    if ($id(IDS.lat)) $id(IDS.lat).value = '';\n    if ($id(IDS.lng)) $id(IDS.lng).value = '';\n    if (window.marker) { try { map.removeLayer(marker); } catch(e){} marker = null; }\n  }\n\n  function updateMarkerAndView(lat, lng, zoom){\n    if (!mapInitialized) initMap();\n    const latlng = L.latLng(lat, lng);\n    if (marker) marker.setLatLng(latlng);\n    else marker = L.marker(latlng).addTo(map);\n    map.setView(latlng, zoom || 17);\n  }\n\n  // ========= ESTADO INTERNO =========\n  let geocodeAbort = null;\n  let lastKey = '';\n\n  // ========= GEOCODERS =========\n  /** Paso 1: geocodificar colonia/CP para obtener bbox y centro */\n  async function geocodeArea({colonia, ciudad, estado, cp}) {\n    const parts = [\n      colonia || '',\n      ciudad  || 'Mérida',\n      estado  || 'Yucatán',\n      cp || '',\n      'México'\n    ].filter(Boolean).join(', ');\n\n    const url = `https://nominatim.openstreetmap.org/search?` +\n                new URLSearchParams({\n                  format: 'json',\n                  addressdetails: '1',\n                  limit: '1',\n                  countrycodes: 'mx',\n                  q: parts\n                }).toString();\n\n    const resp = await fetch(url, { headers: { 'Accept': 'application/json' } });\n    const data = await resp.json();\n    if (Array.isArray(data) && data.length) {\n      const item = data[0];\n      const bbox = item.boundingbox ? {\n        south: parseFloat(item.boundingbox[0]),\n        north: parseFloat(item.boundingbox[1]),\n        west:  parseFloat(item.boundingbox[2]),\n        east:  parseFloat(item.boundingbox[3])\n      } : null;\n\n      return {\n        lat: parseFloat(item.lat),\n        lon: parseFloat(item.lon),\n        bbox\n      };\n    }\n    return null;\n  }\n\n  /** Paso 2: buscar calle/número dentro de un viewbox (bounded=1) */\n  async function geocodeStreetInViewbox({street, ciudad, estado, cp, bbox}) {\n    const params = new URLSearchParams({\n      format: 'json',\n      addressdetails: '1',\n      limit: '1',\n      country: 'México',\n      city: ciudad || 'Mérida',\n      state: estado || 'Yucatán',\n      bounded: '1'\n    });\n    if (street) params.append('street', street);\n    if (cp)     params.append('postalcode', cp);\n\n    if (bbox) {\n      // viewbox: left,top,right,bottom => west,north,east,south\n      params.append('viewbox', `${bbox.west},${bbox.north},${bbox.east},${bbox.south}`);\n    }\n\n    let url = `https://nominatim.openstreetmap.org/search?${params.toString()}`;\n    let resp = await fetch(url, { headers: { 'Accept': 'application/json' } });\n    let data = await resp.json();\n\n    // Fallback a texto libre si no hay hit\n    if (!Array.isArray(data) || !data.length) {\n      const free = [\n        street || '',\n        ciudad || 'Mérida',\n        estado || 'Yucatán',\n        cp || '',\n        'México'\n      ].filter(Boolean).join(', ');\n\n      url = `https://nominatim.openstreetmap.org/search?` + new URLSearchParams({\n        format: 'json', addressdetails: '1', limit: '1', countrycodes: 'mx', q: free\n      }).toString();\n\n      resp = await fetch(url, { headers: { 'Accept': 'application/json' } });\n      data = await resp.json();\n    }\n\n    if (Array.isArray(data) && data.length) {\n      return {\n        lat: parseFloat(data[0].lat),\n        lon: parseFloat(data[0].lon)\n      };\n    }\n    return null;\n  }\n\n  /** Función principal: colonia/CP -> bbox y luego calle dentro del bbox */\n  async function geocodeAddressAndUpdateStructured(force=false){\n    const calle   = safeTrim($id(IDS.calle)?.value);\n    const numext  = safeTrim($id(IDS.numext)?.value);\n    const numint  = safeTrim($id(IDS.numint)?.value);\n    const colonia = safeTrim($id(IDS.colonia)?.value);\n    const ciudad  = safeTrim($id(IDS.ciudad)?.value)  || 'MERIDA';\n    const estado  = safeTrim($id(IDS.estado)?.value)  || 'YUCATAN';\n    const cp      = safeTrim($id(IDS.cp)?.value);\n\n    const streetParts = [calle, numext, numint ? `Int ${numint}` : ''].filter(Boolean);\n    const street = streetParts.join(' ');\n\n    // Requisitos mínimos: (calle o colonia o cp) + ciudad + estado\n    if (!( (street || colonia || cp) && ciudad && estado )) return;\n\n    // Evita repeticiones si no es \"force\"\n    const key = JSON.stringify({street, colonia, ciudad, estado, cp}).toUpperCase();\n    if (!force && key === lastKey) return;\n    lastKey = key;\n\n    // Cancela petición previa si existe\n    if (geocodeAbort) geocodeAbort.abort();\n    geocodeAbort = new AbortController();\n\n    let area = null;\n\n    // 1) Si hay colonia o CP, obten bbox del área\n    if (colonia || cp) {\n      try { area = await geocodeArea({ colonia, ciudad, estado, cp }); }\n      catch(e){ console.warn('[MAP] geocodeArea error', e); }\n    }\n\n    // 2) Si hay calle, intenta ubicarla dentro del bbox del área\n    if (street) {\n      try {\n        const hit = await geocodeStreetInViewbox({ street, ciudad, estado, cp, bbox: area?.bbox });\n        if (hit && isValidLatLng(hit.lat, hit.lon)) {\n          if ($id(IDS.lat)) $id(IDS.lat).value = hit.lat;\n          if ($id(IDS.lng)) $id(IDS.lng).value = hit.lon;\n          updateMarkerAndView(hit.lat, hit.lon, 18);\n          geocodeAbort = null;\n          return;\n        }\n      } catch(e){\n        console.warn('[MAP] geocodeStreetInViewbox error', e);\n      }\n    }\n\n    // 3) Sin calle (o sin hit), usa el centro de la colonia/CP si existe\n    if (area && isValidLatLng(area.lat, area.lon)) {\n      if ($id(IDS.lat)) $id(IDS.lat).value = area.lat;\n      if ($id(IDS.lng)) $id(IDS.lng).value = area.lon;\n      const zoom = colonia ? 16 : 15;\n      updateMarkerAndView(area.lat, area.lon, zoom);\n      geocodeAbort = null;\n      return;\n    }\n\n    // 4) Fallback total: búsqueda libre con todo\n    try {\n      const free = [street, colonia, ciudad, estado, cp, 'México'].filter(Boolean).join(', ');\n      const url = `https://nominatim.openstreetmap.org/search?` + new URLSearchParams({\n        format:'json', addressdetails:'1', limit:'1', countrycodes:'mx', q: free\n      }).toString();\n      const resp = await fetch(url, { headers: { 'Accept':'application/json' } });\n      const data = await resp.json();\n      if (Array.isArray(data) && data.length) {\n        const lat = parseFloat(data[0].lat), lon = parseFloat(data[0].lon);\n        if (isValidLatLng(lat, lon)) {\n          if ($id(IDS.lat)) $id(IDS.lat).value = lat;\n          if ($id(IDS.lng)) $id(IDS.lng).value = lon;\n          updateMarkerAndView(lat, lon, street ? 18 : (colonia ? 16 : 15));\n        }\n      }\n    } catch(e){\n      console.error('[MAP] fallback free-text error', e);\n    } finally {\n      geocodeAbort = null;\n    }\n  }\n\n  // ========= LISTENERS (sin temporizadores) =========\n  function attachListeners(){\n    const finishEvents = ['change','blur','focusout','compositionend','keydown'];\n\n    function onFinish(ev){\n      if (ev.type === 'keydown' && ev.key !== 'Enter') return;\n      if (!ev.isTrusted) return; // ignora cambios programáticos\n      invalidateCoordsAndMarker();\n      geocodeAddressAndUpdateStructured(true);\n    }\n\n    // Disparadores: calle, colonia, ciudad, estado, CP\n    [IDS.calle, IDS.colonia, IDS.ciudad, IDS.estado, IDS.cp].forEach(id => {\n      const el = $id(id);\n      if (!el) return;\n      finishEvents.forEach(evt => el.addEventListener(evt, onFinish));\n    });\n\n    // Lat/Lng manuales\n    function moveByLatLng(ev){\n      if (ev.type === 'keydown' && ev.key !== 'Enter') return;\n      const lat = safeTrim($id(IDS.lat)?.value);\n      const lng = safeTrim($id(IDS.lng)?.value);\n      if (isValidLatLng(lat, lng)) updateMarkerAndView(Number(lat), Number(lng), 18);\n    }\n    [IDS.lat, IDS.lng].forEach(id => {\n      const el = $id(id);\n      if (!el) return;\n      ['change','blur','focusout','keydown'].forEach(evt => el.addEventListener(evt, moveByLatLng));\n    });\n  }\n\n  // ========= ARRANQUE =========\n  document.addEventListener('DOMContentLoaded', () => {\n    attachListeners();\n\n    // Si ya hay coords, centra ahí\n    const lat = safeTrim($id(IDS.lat)?.value);\n    const lng = safeTrim($id(IDS.lng)?.value);\n    if (isValidLatLng(lat, lng)){\n      updateMarkerAndView(Number(lat), Number(lng), 18);\n    } else {\n      // Si hay (calle o colonia o CP) + ciudad/estado, geocodifica de entrada\n      const calle   = safeTrim($id(IDS.calle)?.value);\n      const colonia = safeTrim($id(IDS.colonia)?.value);\n      const ciudad  = safeTrim($id(IDS.ciudad)?.value) || 'MERIDA';\n      const estado  = safeTrim($id(IDS.estado)?.value) || 'YUCATAN';\n      const cp      = safeTrim($id(IDS.cp)?.value);\n      if ((calle || colonia || cp) && ciudad && estado){\n        geocodeAddressAndUpdateStructured(true);\n      }\n    }\n  });\n\n})();\n</script>\n",
						"type": 0
					},
					"editedByRte": false
				},
				"next_step": {
					"type": "next_step"
				},
				"step_nav": {
					"type": "step_nav"
				},
				"integrated_edit_field17": {
					"field": "lat",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"integrated_edit_field18": {
					"field": "lng",
					"type": "integrated_edit_field",
					"orientation": 0,
					"updateOnEdit": false
				},
				"snippet": {
					"type": "snippet",
					"eventGid": 1797818547
				}
			},
			"dbProps": {},
			"steps": [
				{
					"location": "grid",
					"label": {
						"text": "Datos iniciales",
						"type": 0
					}
				},
				{
					"location": "step2",
					"label": {
						"text": "Datos de la Entrega",
						"type": 0
					}
				}
			],
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {}
		},
		{
			"id": "view",
			"type": "view",
			"layoutId": "nomenu",
			"disabled": false,
			"default": 0,
			"forms": {
				"above-grid": {
					"modelId": "view-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1",
									"colspan": 2
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"below-grid": {
					"modelId": "view-below-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								},
								{
									"cell": "c2"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"view_back_list",
								"view_close"
							]
						},
						"c2": {
							"model": "c2",
							"items": [
								"hamburger"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "view-header",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"view_header"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c3"
								},
								{
									"cell": "c"
								}
							],
							"section": ""
						},
						{
							"cells": [
								{
									"cell": "c4",
									"colspan": 2,
									"rowspan": 1
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c3": {
							"model": "c3",
							"items": [
								"section"
							],
							"border": [
								{
									"side": "",
									"width": "0"
								}
							],
							"padding": {
								"right": "10px"
							}
						},
						"c": {
							"model": "c3",
							"items": [
								"section1"
							]
						},
						"c4": {
							"model": "c3",
							"items": [
								"section2"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				},
				"section": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"integrated_edit_field3",
								"integrated_edit_field4",
								"integrated_edit_field5",
								"integrated_edit_field1",
								"integrated_edit_field6",
								"integrated_edit_field9"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				},
				"section1": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"integrated_edit_field",
								"integrated_edit_field2",
								"integrated_edit_field7",
								"integrated_edit_field8"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				},
				"section2": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								},
								{
									"cell": "c"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"integrated_edit_field13",
								"integrated_edit_field14",
								"integrated_edit_field15",
								"integrated_edit_field16"
							]
						},
						"c": {
							"model": "c1",
							"items": [
								"integrated_edit_field11",
								"integrated_edit_field10",
								"integrated_edit_field12",
								"text"
							]
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				}
			},
			"items": {
				"view_header": {
					"type": "view_header"
				},
				"view_back_list": {
					"type": "view_back_list"
				},
				"view_close": {
					"type": "view_close"
				},
				"hamburger": {
					"type": "hamburger",
					"items": [
						"view_edit"
					]
				},
				"view_edit": {
					"type": "view_edit"
				},
				"section": {
					"type": "section",
					"title": {
						"type": 0,
						"text": "Datos del cliente"
					},
					"location": "section",
					"bsStyle": "default",
					"panelType": 3,
					"headerBg": "#a0dcf5",
					"headerColor": "",
					"bodyBg": "",
					"bodyColor": "",
					"panelBorder": null,
					"borderColor": ""
				},
				"integrated_edit_field3": {
					"field": "idcliente",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "idcliente",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field4": {
					"field": "paterno",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "paterno",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field5": {
					"field": "materno",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "materno",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field1": {
					"field": "nombre",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "nombre",
						"table": "solicitudes",
						"type": 5
					},
					"label": {
						"field": "nombre",
						"table": "solicitudes",
						"type": 3
					}
				},
				"integrated_edit_field6": {
					"field": "rfc",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field9": {
					"field": "idcli",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"section1": {
					"type": "section",
					"title": {
						"type": 0,
						"text": "Datos de la solicitud"
					},
					"location": "section1",
					"bsStyle": "default",
					"panelType": 3,
					"headerBg": "#72d6f9",
					"headerColor": "",
					"bodyBg": "",
					"bodyColor": "",
					"panelBorder": null,
					"borderColor": ""
				},
				"integrated_edit_field": {
					"field": "idproducto",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "idproducto",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field2": {
					"field": "idplan",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "idplan",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field7": {
					"field": "orden",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "orden",
						"table": "solicitudes",
						"type": 5
					}
				},
				"integrated_edit_field8": {
					"field": "plazo",
					"type": "integrated_edit_field",
					"orientation": 0,
					"placeholder": {
						"field": "plazo",
						"table": "solicitudes",
						"type": 5
					}
				},
				"section2": {
					"type": "section",
					"title": {
						"type": 0,
						"text": "Datos de entrega"
					},
					"location": "section2",
					"bsStyle": "default",
					"panelType": 3,
					"headerBg": "#44bee9",
					"headerColor": "",
					"bodyBg": "",
					"bodyColor": "",
					"panelBorder": null,
					"borderColor": ""
				},
				"integrated_edit_field13": {
					"field": "calle",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field14": {
					"field": "numeroext",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field15": {
					"field": "numeroint",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field16": {
					"field": "colonia",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field11": {
					"field": "ciudad",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field10": {
					"field": "estado",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"integrated_edit_field12": {
					"field": "cp",
					"type": "integrated_edit_field",
					"orientation": 0
				},
				"text": {
					"type": "text",
					"label": {
						"text": "<div id=\"map\" style=\"height: 400px; width: 100%; margin-bottom: 10px; border: 1px solid #ccc;\"></div>\n<p><strong>Haz clic en el mapa para establecer la ubicación.</strong></p>\n\n<!-- Cargar la API de Google Maps (Reemplaza TU_API_KEY) -->\n<script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyA2P1eBUfOvpeXBIWM5t5Drg3EjZc25Tzs&callback=initMap&libraries=places&v=weekly\" async defer></script>\n\n<script>\n// Variables globales\nlet map;\nlet marker;\nlet geocoder;\n\nfunction initMap() {\n    // Coordenadas iniciales\n    const initialLocation = { lat: 21.0038, lng: -89.6183 };\n    // Crear el mapa\n    map = new google.maps.Map(document.getElementById(\"map\"), {\n        zoom: 12,\n        center: initialLocation,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n    });\n    // Inicializar el geocoder\n    geocoder = new google.maps.Geocoder();\n    // Escuchar el evento de clic en el mapa\n    map.addListener('click', function(event) {\n        placeMarkerAndGeocode(event.latLng);\n    });\n}\n\nfunction placeMarkerAndGeocode(location) {\n    // Limpiar el marcador anterior si existe\n    if (marker) {\n        marker.setMap(null);\n    }\n    // Colocar un nuevo marcador\n    marker = new google.maps.Marker({\n        position: location,\n        map: map\n    });\n    // Centrar el mapa en la nueva ubicación\n    map.panTo(location);\n    // Obtener la dirección a partir de las coordenadas (Geocodificación Inversa)\n    geocoder.geocode({ 'location': location }, function(results, status) {\n        if (status === 'OK') {\n            if (results[0]) {\n                // Llenar los campos del formulario con los datos obtenidos\n                populateAddressFields(results[0]);\n            } else {\n                alert('No se encontraron resultados para esta ubicación.');\n            }\n        } else {\n            alert('Falló la geocodificación: ' + status);\n        }\n    });\n}\n\nfunction populateAddressFields(addressData) {\n    // Esta función descompone la respuesta de geocodificación y llena los campos.\n    // La estructura de 'address_components' puede variar, ¡debes ajustarla!\n    \n    let addressComponents = addressData.address_components;\n    let addressLookup = {};\n    \n    // Crear un objeto fácil de buscar a partir de los componentes\n    addressComponents.forEach(component => {\n        component.types.forEach(type => {\n            addressLookup[type] = component.long_name;\n        });\n    });\n    // Llenar los campos del formulario de PHPRunner.\n    // ¡IMPORTANTE! Reemplaza 'Editbox1' con los nombres REALES de tus campos.\n    // Puedes encontrar el nombre real del campo en la pestaña \"Fields\" de PHPRunner.\n    \n    // Usar getElementById o un selector por nombre\n    document.getElementById('value_estado_1').value = addressLookup['administrative_area_level_1'] || ''; // Estado\n    document.getElementById('value_ciudad_1').value = addressLookup['locality'] || addressLookup['administrative_area_level_2'] || ''; // Ciudad o Municipio\n    document.getElementById('value_cp_1').value = addressLookup['postal_code'] || ''; // Código Postal\n    document.getElementById('value_colonia_1').value = addressLookup['sublocality_level_1'] || addressLookup['neighborhood'] || ''; // Colonia\n    document.getElementById('value_calle_1').value = getRoute(addressComponents) || ''; // Calle\n}\n\n// Función de ayuda para obtener el nombre de la calle\nfunction getRoute(components) {\n    for (let i = 0; i < components.length; i++) {\n        if (components[i].types.includes('route')) {\n            return components[i].long_name;\n        }\n    }\n    return '';\n}\n// Inicializar el mapa cuando la página esté cargada\n// Google Maps llama a 'initMap' automáticamente por el callback en la URL de la API\n</script>",
						"type": 0
					},
					"editedByRte": false
				}
			},
			"dbProps": {},
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {}
		},
		{
			"id": "list",
			"type": "list",
			"layoutId": "leftbar",
			"disabled": false,
			"default": 0,
			"forms": {
				"above-grid": {
					"modelId": "list-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								},
								{
									"cell": "c2"
								}
							],
							"section": ""
						},
						{
							"cells": [
								{
									"cell": "c3"
								},
								{
									"cell": "c4"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"add",
								"inline_save_all",
								"inline_cancel_all",
								"delete"
							]
						},
						"c2": {
							"model": "c2",
							"items": [
								"text1",
								"snippet",
								"text",
								"snippet1",
								"details_found",
								"page_size",
								"print_panel"
							]
						},
						"c3": {
							"model": "c3",
							"items": []
						},
						"c4": {
							"model": "c4",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"below-grid": {
					"modelId": "list-below-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"pagination"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"left": {
					"modelId": "leftbar-menu",
					"grid": [
						{
							"cells": [
								{
									"cell": "c0"
								}
							],
							"section": ""
						},
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c0": {
							"model": "c0",
							"items": [
								"logo",
								"expand_button"
							]
						},
						"c1": {
							"model": "c1",
							"items": [
								"menu"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"supertop": {
					"modelId": "leftbar-top",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								},
								{
									"cell": "c2"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"expand_menu_button",
								"collapse_button",
								"breadcrumb"
							]
						},
						"c2": {
							"model": "c2",
							"items": [
								"simple_search",
								"list_options",
								"loginform_login",
								"username_button"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "list-sidebar-top",
					"grid": [],
					"cells": {},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "horizontal-grid",
					"grid": [
						{
							"section": "head",
							"cells": [
								{
									"cell": "headcell_icons"
								},
								{
									"cell": "headcell_checkbox"
								},
								{
									"cell": "headcell_field2"
								},
								{
									"cell": "headcell_field3"
								},
								{
									"cell": "headcell_field4"
								},
								{
									"cell": "headcell_field12"
								},
								{
									"cell": "headcell_field16"
								},
								{
									"cell": "headcell_field"
								},
								{
									"cell": "headcell_field1"
								},
								{
									"cell": "headcell_field7"
								},
								{
									"cell": "headcell_field8"
								},
								{
									"cell": "headcell_field9"
								},
								{
									"cell": "headcell_field10"
								}
							]
						},
						{
							"section": "body",
							"cells": [
								{
									"cell": "cell_icons"
								},
								{
									"cell": "cell_checkbox"
								},
								{
									"cell": "cell_field2"
								},
								{
									"cell": "headcell_field5"
								},
								{
									"cell": "cell_field4"
								},
								{
									"cell": "cell_field12"
								},
								{
									"cell": "cell_field16"
								},
								{
									"cell": "cell_field"
								},
								{
									"cell": "cell_field1"
								},
								{
									"cell": "cell_field3"
								},
								{
									"cell": "cell_field5"
								},
								{
									"cell": "cell_field6"
								},
								{
									"cell": "headcell_field11"
								}
							]
						},
						{
							"cells": [
								{
									"cell": "cell_dpreview",
									"colspan": 13
								}
							],
							"section": "body"
						},
						{
							"section": "foot",
							"cells": [
								{
									"cell": "footcell_icons"
								},
								{
									"cell": "footcell_checkbox"
								},
								{
									"cell": "footcell_field2"
								},
								{
									"cell": "headcell_field6"
								},
								{
									"cell": "footcell_field4"
								},
								{
									"cell": "footcell_field12"
								},
								{
									"cell": "footcell_field16"
								},
								{
									"cell": "footcell_field"
								},
								{
									"cell": "footcell_field1"
								},
								{
									"cell": "footcell_field3"
								},
								{
									"cell": "footcell_field5"
								},
								{
									"cell": "footcell_field6"
								},
								{
									"cell": "headcell_field14"
								}
							]
						}
					],
					"cells": {
						"headcell_field2": {
							"model": "headcell_field",
							"items": [
								"simple_grid_field31"
							],
							"field": "fecha",
							"columnName": "field"
						},
						"cell_field2": {
							"model": "cell_field",
							"items": [
								"simple_grid_field2"
							],
							"field": "fecha",
							"columnName": "field"
						},
						"footcell_field2": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "fecha"
						},
						"headcell_field4": {
							"model": "headcell_field",
							"items": [
								"grid_field_label"
							],
							"field": "descripcion",
							"columnName": "field"
						},
						"cell_field4": {
							"model": "cell_field",
							"items": [
								"grid_field"
							],
							"field": "descripcion",
							"columnName": "field"
						},
						"footcell_field4": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "descripcion"
						},
						"headcell_field12": {
							"model": "headcell_field",
							"items": [
								"simple_grid_field41"
							],
							"field": "estatus",
							"columnName": "field"
						},
						"cell_field12": {
							"model": "cell_field",
							"items": [
								"simple_grid_field12"
							],
							"field": "estatus",
							"columnName": "field"
						},
						"footcell_field12": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "estatus"
						},
						"headcell_field16": {
							"model": "headcell_field",
							"items": [
								"simple_grid_field45"
							],
							"field": "plazo",
							"columnName": "field"
						},
						"cell_field16": {
							"model": "cell_field",
							"items": [
								"simple_grid_field16"
							],
							"field": "plazo",
							"columnName": "field"
						},
						"footcell_field16": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "plazo"
						},
						"headcell_checkbox": {
							"model": "headcell_checkbox",
							"items": [
								"grid_checkbox_head"
							],
							"columnName": "checkbox",
							"field": ""
						},
						"cell_checkbox": {
							"model": "cell_checkbox",
							"items": [
								"grid_checkbox"
							],
							"columnName": "checkbox",
							"field": ""
						},
						"footcell_checkbox": {
							"model": "footcell_checkbox",
							"items": [],
							"columnName": "checkbox",
							"field": ""
						},
						"headcell_icons": {
							"model": "headcell_icons",
							"items": [],
							"columnName": "list-icons",
							"field": ""
						},
						"cell_icons": {
							"model": "cell_icons",
							"items": [
								"grid_edit",
								"grid_inline_edit",
								"grid_inline_save",
								"grid_inline_cancel",
								"grid_view",
								"logistic_btn"
							],
							"orientation": "horizontal",
							"columnName": "list-icons",
							"field": ""
						},
						"footcell_icons": {
							"model": "footcell_icons",
							"items": [],
							"columnName": "list-icons",
							"field": ""
						},
						"headcell_field": {
							"model": "headcell_field",
							"items": [
								"simple_grid_field39"
							],
							"field": "orden",
							"columnName": "field"
						},
						"cell_field": {
							"model": "cell_field",
							"items": [
								"simple_grid_field10"
							],
							"field": "orden",
							"columnName": "field"
						},
						"footcell_field": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "orden"
						},
						"headcell_field3": {
							"model": "headcell_field",
							"items": [
								"simple_grid_field33"
							],
							"field": "idcliente",
							"columnName": "field"
						},
						"headcell_field5": {
							"model": "cell_field",
							"items": [
								"simple_grid_field4"
							],
							"field": "idcliente",
							"columnName": "field"
						},
						"headcell_field6": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "idcliente"
						},
						"headcell_field1": {
							"model": "headcell_field",
							"items": [
								"grid_field_label1"
							],
							"field": "maps_url",
							"columnName": "field"
						},
						"cell_field1": {
							"model": "cell_field",
							"items": [
								"grid_field1"
							],
							"field": "maps_url",
							"columnName": "field"
						},
						"footcell_field1": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "maps_url"
						},
						"headcell_field7": {
							"model": "headcell_field",
							"items": [
								"grid_field_label2"
							],
							"field": "estatusentrega",
							"columnName": "field"
						},
						"cell_field3": {
							"model": "cell_field",
							"items": [
								"grid_field2"
							],
							"field": "estatusentrega",
							"columnName": "field"
						},
						"footcell_field3": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "estatusentrega"
						},
						"headcell_field8": {
							"model": "headcell_field",
							"items": [
								"grid_field_label3"
							],
							"field": "equipo",
							"columnName": "field"
						},
						"cell_field5": {
							"model": "cell_field",
							"items": [
								"grid_field3"
							],
							"field": "equipo",
							"columnName": "field"
						},
						"footcell_field5": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "equipo"
						},
						"headcell_field9": {
							"model": "headcell_field",
							"items": [
								"grid_field_label4"
							],
							"field": "chip",
							"columnName": "field"
						},
						"cell_field6": {
							"model": "cell_field",
							"items": [
								"grid_field4"
							],
							"field": "chip",
							"columnName": "field"
						},
						"footcell_field6": {
							"model": "footcell_field",
							"items": [],
							"columnName": "field",
							"field": "chip"
						},
						"cell_dpreview": {
							"model": "cell_dpreview",
							"items": [],
							"columnName": "details",
							"field": ""
						},
						"headcell_field10": {
							"model": "headcell_field",
							"items": [
								"text2"
							],
							"columnName": "details",
							"field": ""
						},
						"headcell_field11": {
							"model": "cell_field",
							"items": [
								"grid_details_link"
							],
							"columnName": "details",
							"field": ""
						},
						"headcell_field14": {
							"model": "footcell_field",
							"items": [],
							"columnName": "details",
							"field": ""
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				}
			},
			"items": {
				"page_size": {
					"type": "page_size"
				},
				"breadcrumb": {
					"type": "breadcrumb"
				},
				"logo": {
					"type": "logo"
				},
				"menu": {
					"type": "menu"
				},
				"simple_search": {
					"type": "simple_search"
				},
				"pagination": {
					"type": "pagination"
				},
				"details_found": {
					"type": "details_found"
				},
				"list_options": {
					"type": "list_options",
					"items": [
						"edit_selected",
						"export_selected",
						"delete_selected",
						"-10",
						"advsearch_link",
						"-9",
						"export"
					]
				},
				"expand_menu_button": {
					"type": "expand_menu_button"
				},
				"collapse_button": {
					"type": "collapse_button"
				},
				"add": {
					"type": "add"
				},
				"export": {
					"type": "export"
				},
				"-": {
					"type": "-"
				},
				"export_selected": {
					"type": "export_selected"
				},
				"-1": {
					"type": "-"
				},
				"-2": {
					"type": "-"
				},
				"delete": {
					"type": "delete"
				},
				"delete_selected": {
					"type": "delete_selected"
				},
				"simple_grid_field2": {
					"field": "fecha",
					"type": "grid_field",
					"inlineAdd": false,
					"inlineEdit": true
				},
				"simple_grid_field31": {
					"type": "grid_field_label",
					"field": "fecha"
				},
				"simple_grid_field4": {
					"field": "idcliente",
					"type": "grid_field",
					"inlineAdd": false,
					"inlineEdit": true
				},
				"simple_grid_field33": {
					"type": "grid_field_label",
					"field": "idcliente"
				},
				"simple_grid_field10": {
					"field": "orden",
					"type": "grid_field",
					"inlineAdd": false,
					"inlineEdit": true
				},
				"simple_grid_field39": {
					"type": "grid_field_label",
					"field": "orden"
				},
				"simple_grid_field12": {
					"field": "estatus",
					"type": "grid_field",
					"inlineAdd": false,
					"inlineEdit": true
				},
				"simple_grid_field41": {
					"type": "grid_field_label",
					"field": "estatus"
				},
				"simple_grid_field16": {
					"field": "plazo",
					"type": "grid_field",
					"inlineAdd": false,
					"inlineEdit": true
				},
				"simple_grid_field45": {
					"type": "grid_field_label",
					"field": "plazo"
				},
				"grid_checkbox": {
					"type": "grid_checkbox"
				},
				"grid_checkbox_head": {
					"type": "grid_checkbox_head"
				},
				"grid_edit": {
					"type": "grid_edit",
					"icon": {
						"glyph": "pencil"
					}
				},
				"grid_view": {
					"type": "grid_view",
					"icon": {
						"glyph": "search"
					}
				},
				"username_button": {
					"type": "username_button",
					"items": [
						"userinfo_link",
						"logout_link",
						"adminarea_link"
					]
				},
				"loginform_login": {
					"type": "loginform_login",
					"popup": false
				},
				"userinfo_link": {
					"type": "userinfo_link"
				},
				"logout_link": {
					"type": "logout_link"
				},
				"adminarea_link": {
					"type": "adminarea_link"
				},
				"grid_field": {
					"field": "descripcion",
					"type": "grid_field",
					"inlineAdd": false,
					"inlineEdit": true
				},
				"grid_field_label": {
					"type": "grid_field_label",
					"field": "descripcion"
				},
				"-3": {
					"type": "-"
				},
				"edit_selected": {
					"type": "edit_selected"
				},
				"grid_inline_edit": {
					"type": "grid_inline_edit"
				},
				"grid_inline_save": {
					"type": "grid_inline_save"
				},
				"grid_inline_cancel": {
					"type": "grid_inline_cancel"
				},
				"inline_save_all": {
					"type": "inline_save_all"
				},
				"inline_cancel_all": {
					"type": "inline_cancel_all"
				},
				"grid_field1": {
					"field": "maps_url",
					"type": "grid_field",
					"inlineEdit": false,
					"inlineAdd": false
				},
				"grid_field_label1": {
					"type": "grid_field_label",
					"field": "maps_url"
				},
				"-4": {
					"type": "-"
				},
				"-5": {
					"type": "-"
				},
				"grid_field2": {
					"field": "estatusentrega",
					"type": "grid_field",
					"inlineEdit": true,
					"inlineAdd": true
				},
				"grid_field_label2": {
					"type": "grid_field_label",
					"field": "estatusentrega"
				},
				"-6": {
					"type": "-"
				},
				"-7": {
					"type": "-"
				},
				"grid_field3": {
					"field": "equipo",
					"type": "grid_field",
					"inlineEdit": false,
					"inlineAdd": false
				},
				"grid_field_label3": {
					"type": "grid_field_label",
					"field": "equipo"
				},
				"grid_field4": {
					"field": "chip",
					"type": "grid_field",
					"inlineEdit": false,
					"inlineAdd": false
				},
				"grid_field_label4": {
					"type": "grid_field_label",
					"field": "chip"
				},
				"-8": {
					"type": "-"
				},
				"-9": {
					"type": "-"
				},
				"snippet": {
					"type": "snippet",
					"eventGid": 3482841917
				},
				"text": {
					"type": "text",
					"label": {
						"text": "-",
						"type": 0
					},
					"editedByRte": false
				},
				"snippet1": {
					"type": "snippet",
					"eventGid": 1209004018
				},
				"advsearch_link": {
					"type": "advsearch_link"
				},
				"-10": {
					"type": "-"
				},
				"text1": {
					"type": "text",
					"label": {
						"type": 0,
						"text": "Rango de fechas: "
					},
					"editedByRte": false
				},
				"grid_details_link": {
					"type": "grid_details_link",
					"table": 3847630651,
					"badge": true,
					"hideIfNone": true,
					"showCount": true,
					"icon": {}
				},
				"print_panel": {
					"type": "print_panel",
					"items": [
						"print_details"
					]
				},
				"print_details": {
					"type": "print_details",
					"tables": {
						"3847630651": true
					}
				},
				"text2": {
					"type": "text",
					"label": {
						"text": "Logística",
						"type": 0
					},
					"editedByRte": false
				},
				"expand_button": {
					"type": "expand_button"
				},
				"logistic_btn": {
					"type": "grid_edit",
					"icon": {
						"glyph": "phone"
					},
					"tooltip": {
						"type": 0,
						"text": "Logística"
					}
				}
			},
			"dbProps": {},
			"spreadsheetGrid": false,
			"autoAddNewRecord": false,
			"version": 13,
			"pageWidth": "full",
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"pageCSS": "/* Put  your custom CSS code here */\n\n.table {\n    font-family: 'Arial', sans-serif !important;\n    font-size: 12px !important;\n    border-collapse: collapse !important;\n}",
			"listTotals": 1,
			"title": {}
		},
		{
			"id": "print",
			"type": "print",
			"layoutId": "basic",
			"disabled": true,
			"default": 0,
			"forms": {
				"above-grid": {
					"modelId": "print-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"print_pages"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"below-grid": {
					"modelId": "print-below-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "print-header",
					"grid": [
						{
							"cells": [
								{
									"cell": "c2"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c2": {
							"model": "c2",
							"items": [
								"print_header",
								"print_subheader"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "simple-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						},
						{
							"cells": [
								{
									"cell": "c2"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"simple_grid_field",
								"simple_grid_field1",
								"simple_grid_field2"
							]
						},
						"c2": {
							"model": "c2",
							"items": [
								"details_preview"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				}
			},
			"items": {
				"print_header": {
					"type": "print_header"
				},
				"print_subheader": {
					"type": "print_subheader"
				},
				"print_pages": {
					"type": "print_pages"
				},
				"simple_grid_field": {
					"field": "direccion",
					"type": "simple_grid_field"
				},
				"simple_grid_field1": {
					"field": "lat",
					"type": "simple_grid_field"
				},
				"simple_grid_field2": {
					"field": "lng",
					"type": "simple_grid_field"
				},
				"details_preview": {
					"type": "details_preview",
					"table": 3847630651,
					"items": [],
					"popup": false
				}
			},
			"dbProps": {},
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {}
		},
		{
			"id": "search",
			"type": "search",
			"layoutId": "nomenu",
			"disabled": false,
			"default": 0,
			"forms": {
				"above-grid": {
					"modelId": "search-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1",
									"colspan": 2
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"below-grid": {
					"modelId": "search-below-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"search_search",
								"search_reset",
								"search_back_list",
								"search_cancel"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "search-header",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"search_header"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "simple-search",
					"grid": [
						{
							"cells": [
								{
									"cell": "c3"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c3": {
							"model": "c3",
							"items": []
						}
					},
					"deferredItems": [],
					"separateLabels": false
				}
			},
			"items": {
				"search_header": {
					"type": "search_header"
				},
				"search_reset": {
					"type": "search_reset"
				},
				"search_back_list": {
					"type": "search_back_list"
				},
				"search_search": {
					"type": "search_search"
				},
				"search_cancel": {
					"type": "search_cancel"
				}
			},
			"dbProps": {},
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {}
		},
		{
			"id": "masterlist",
			"type": "masterlist",
			"layoutId": "masterlist",
			"disabled": false,
			"default": 0,
			"forms": {
				"above-grid": {
					"modelId": "empty-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"below-grid": {
					"modelId": "empty-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "masterlist-top",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"back_master",
								"masterlist_header"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "simple-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"simple_grid_field",
								"simple_grid_field1",
								"simple_grid_field2",
								"simple_grid_field3",
								"simple_grid_field4",
								"simple_grid_field5",
								"simple_grid_field6",
								"simple_grid_field7",
								"simple_grid_field8",
								"simple_grid_field9",
								"simple_grid_field10",
								"simple_grid_field11",
								"simple_grid_field12",
								"simple_grid_field13",
								"simple_grid_field14",
								"simple_grid_field15",
								"simple_grid_field16",
								"simple_grid_field17",
								"simple_grid_field18",
								"simple_grid_field19",
								"simple_grid_field20",
								"simple_grid_field21",
								"simple_grid_field22",
								"simple_grid_field23",
								"simple_grid_field24",
								"simple_grid_field25",
								"simple_grid_field26",
								"simple_grid_field27",
								"simple_grid_field28",
								"simple_grid_field29",
								"simple_grid_field30",
								"simple_grid_field31",
								"simple_grid_field32",
								"simple_grid_field33",
								"simple_grid_field34",
								"simple_grid_field35",
								"simple_grid_field36",
								"simple_grid_field37",
								"simple_grid_field38",
								"simple_grid_field39",
								"simple_grid_field40",
								"simple_grid_field41",
								"simple_grid_field42",
								"simple_grid_field43",
								"simple_grid_field44",
								"simple_grid_field45",
								"simple_grid_field46"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				}
			},
			"items": {
				"masterlist_header": {
					"type": "masterlist_header"
				},
				"back_master": {
					"type": "back_master"
				},
				"simple_grid_field": {
					"field": "idsolicitud",
					"type": "simple_grid_field"
				},
				"simple_grid_field1": {
					"field": "idtipoventa",
					"type": "simple_grid_field"
				},
				"simple_grid_field2": {
					"field": "fecha",
					"type": "simple_grid_field"
				},
				"simple_grid_field3": {
					"field": "fechacaptura",
					"type": "simple_grid_field"
				},
				"simple_grid_field4": {
					"field": "idcliente",
					"type": "simple_grid_field"
				},
				"simple_grid_field5": {
					"field": "idproducto",
					"type": "simple_grid_field"
				},
				"simple_grid_field6": {
					"field": "idplan",
					"type": "simple_grid_field"
				},
				"simple_grid_field7": {
					"field": "usuario",
					"type": "simple_grid_field"
				},
				"simple_grid_field8": {
					"field": "idtienda",
					"type": "simple_grid_field"
				},
				"simple_grid_field9": {
					"field": "fechamodif",
					"type": "simple_grid_field"
				},
				"simple_grid_field10": {
					"field": "orden",
					"type": "simple_grid_field"
				},
				"simple_grid_field11": {
					"field": "solicitudimg",
					"type": "simple_grid_field"
				},
				"simple_grid_field12": {
					"field": "estatus",
					"type": "simple_grid_field"
				},
				"simple_grid_field13": {
					"field": "idsolrazon",
					"type": "simple_grid_field"
				},
				"simple_grid_field14": {
					"field": "importeatt",
					"type": "simple_grid_field"
				},
				"simple_grid_field15": {
					"field": "importesms",
					"type": "simple_grid_field"
				},
				"simple_grid_field16": {
					"field": "plazo",
					"type": "simple_grid_field"
				},
				"simple_grid_field17": {
					"field": "observaciones",
					"type": "simple_grid_field"
				},
				"simple_grid_field18": {
					"field": "equipoincluido",
					"type": "simple_grid_field"
				},
				"simple_grid_field19": {
					"field": "rfc",
					"type": "simple_grid_field"
				},
				"simple_grid_field20": {
					"field": "idtratamiento",
					"type": "simple_grid_field"
				},
				"simple_grid_field21": {
					"field": "riesgo",
					"type": "simple_grid_field"
				},
				"simple_grid_field22": {
					"field": "observacionest",
					"type": "simple_grid_field"
				},
				"simple_grid_field23": {
					"field": "idcli",
					"type": "simple_grid_field"
				},
				"simple_grid_field24": {
					"field": "fecha1avta",
					"type": "simple_grid_field"
				},
				"simple_grid_field25": {
					"field": "idplan1avta",
					"type": "simple_grid_field"
				},
				"simple_grid_field26": {
					"field": "dn1avta",
					"type": "simple_grid_field"
				},
				"simple_grid_field27": {
					"field": "idproceso",
					"type": "simple_grid_field"
				},
				"simple_grid_field28": {
					"field": "idorigenventa",
					"type": "simple_grid_field"
				},
				"simple_grid_field29": {
					"field": "nombre",
					"type": "simple_grid_field"
				},
				"simple_grid_field30": {
					"field": "paterno",
					"type": "simple_grid_field"
				},
				"simple_grid_field31": {
					"field": "materno",
					"type": "simple_grid_field"
				},
				"simple_grid_field32": {
					"field": "estado",
					"type": "simple_grid_field"
				},
				"simple_grid_field33": {
					"field": "ciudad",
					"type": "simple_grid_field"
				},
				"simple_grid_field34": {
					"field": "cp",
					"type": "simple_grid_field"
				},
				"simple_grid_field35": {
					"field": "calle",
					"type": "simple_grid_field"
				},
				"simple_grid_field36": {
					"field": "numeroext",
					"type": "simple_grid_field"
				},
				"simple_grid_field37": {
					"field": "numeroint",
					"type": "simple_grid_field"
				},
				"simple_grid_field38": {
					"field": "colonia",
					"type": "simple_grid_field"
				},
				"simple_grid_field39": {
					"field": "descripcion",
					"type": "simple_grid_field"
				},
				"simple_grid_field40": {
					"field": "maps_url",
					"type": "simple_grid_field"
				},
				"simple_grid_field41": {
					"field": "direccion",
					"type": "simple_grid_field"
				},
				"simple_grid_field42": {
					"field": "estatusentrega",
					"type": "simple_grid_field"
				},
				"simple_grid_field43": {
					"field": "equipo",
					"type": "simple_grid_field"
				},
				"simple_grid_field44": {
					"field": "chip",
					"type": "simple_grid_field"
				},
				"simple_grid_field45": {
					"field": "lat",
					"type": "simple_grid_field"
				},
				"simple_grid_field46": {
					"field": "lng",
					"type": "simple_grid_field"
				}
			},
			"dbProps": {},
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {}
		},
		{
			"id": "masterprint",
			"type": "masterprint",
			"layoutId": "masterprint",
			"disabled": false,
			"default": 0,
			"forms": {
				"above-grid": {
					"modelId": "empty-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"below-grid": {
					"modelId": "empty-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": []
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "masterlist-top",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"masterprint_header"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "simple-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"simple_grid_field",
								"simple_grid_field1",
								"simple_grid_field2",
								"simple_grid_field3",
								"simple_grid_field4",
								"simple_grid_field5",
								"simple_grid_field6",
								"simple_grid_field7",
								"simple_grid_field8",
								"simple_grid_field9",
								"simple_grid_field10",
								"simple_grid_field11",
								"simple_grid_field12",
								"simple_grid_field13",
								"simple_grid_field14",
								"simple_grid_field15",
								"simple_grid_field16",
								"simple_grid_field17",
								"simple_grid_field18",
								"simple_grid_field19",
								"simple_grid_field20",
								"simple_grid_field21",
								"simple_grid_field22",
								"simple_grid_field23",
								"simple_grid_field24",
								"simple_grid_field25",
								"simple_grid_field26",
								"simple_grid_field27",
								"simple_grid_field28",
								"simple_grid_field29",
								"simple_grid_field30",
								"simple_grid_field31",
								"simple_grid_field32",
								"simple_grid_field33",
								"simple_grid_field34",
								"simple_grid_field35",
								"simple_grid_field36",
								"simple_grid_field37",
								"simple_grid_field38",
								"simple_grid_field39",
								"simple_grid_field40",
								"simple_grid_field41",
								"simple_grid_field42",
								"simple_grid_field43",
								"simple_grid_field44",
								"simple_grid_field45",
								"simple_grid_field46"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				}
			},
			"items": {
				"masterprint_header": {
					"type": "masterprint_header"
				},
				"simple_grid_field": {
					"field": "idsolicitud",
					"type": "simple_grid_field"
				},
				"simple_grid_field1": {
					"field": "idtipoventa",
					"type": "simple_grid_field"
				},
				"simple_grid_field2": {
					"field": "fecha",
					"type": "simple_grid_field"
				},
				"simple_grid_field3": {
					"field": "fechacaptura",
					"type": "simple_grid_field"
				},
				"simple_grid_field4": {
					"field": "idcliente",
					"type": "simple_grid_field"
				},
				"simple_grid_field5": {
					"field": "idproducto",
					"type": "simple_grid_field"
				},
				"simple_grid_field6": {
					"field": "idplan",
					"type": "simple_grid_field"
				},
				"simple_grid_field7": {
					"field": "usuario",
					"type": "simple_grid_field"
				},
				"simple_grid_field8": {
					"field": "idtienda",
					"type": "simple_grid_field"
				},
				"simple_grid_field9": {
					"field": "fechamodif",
					"type": "simple_grid_field"
				},
				"simple_grid_field10": {
					"field": "orden",
					"type": "simple_grid_field"
				},
				"simple_grid_field11": {
					"field": "solicitudimg",
					"type": "simple_grid_field"
				},
				"simple_grid_field12": {
					"field": "estatus",
					"type": "simple_grid_field"
				},
				"simple_grid_field13": {
					"field": "idsolrazon",
					"type": "simple_grid_field"
				},
				"simple_grid_field14": {
					"field": "importeatt",
					"type": "simple_grid_field"
				},
				"simple_grid_field15": {
					"field": "importesms",
					"type": "simple_grid_field"
				},
				"simple_grid_field16": {
					"field": "plazo",
					"type": "simple_grid_field"
				},
				"simple_grid_field17": {
					"field": "observaciones",
					"type": "simple_grid_field"
				},
				"simple_grid_field18": {
					"field": "equipoincluido",
					"type": "simple_grid_field"
				},
				"simple_grid_field19": {
					"field": "rfc",
					"type": "simple_grid_field"
				},
				"simple_grid_field20": {
					"field": "idtratamiento",
					"type": "simple_grid_field"
				},
				"simple_grid_field21": {
					"field": "riesgo",
					"type": "simple_grid_field"
				},
				"simple_grid_field22": {
					"field": "observacionest",
					"type": "simple_grid_field"
				},
				"simple_grid_field23": {
					"field": "idcli",
					"type": "simple_grid_field"
				},
				"simple_grid_field24": {
					"field": "fecha1avta",
					"type": "simple_grid_field"
				},
				"simple_grid_field25": {
					"field": "idplan1avta",
					"type": "simple_grid_field"
				},
				"simple_grid_field26": {
					"field": "dn1avta",
					"type": "simple_grid_field"
				},
				"simple_grid_field27": {
					"field": "idproceso",
					"type": "simple_grid_field"
				},
				"simple_grid_field28": {
					"field": "idorigenventa",
					"type": "simple_grid_field"
				},
				"simple_grid_field29": {
					"field": "nombre",
					"type": "simple_grid_field"
				},
				"simple_grid_field30": {
					"field": "paterno",
					"type": "simple_grid_field"
				},
				"simple_grid_field31": {
					"field": "materno",
					"type": "simple_grid_field"
				},
				"simple_grid_field32": {
					"field": "estado",
					"type": "simple_grid_field"
				},
				"simple_grid_field33": {
					"field": "ciudad",
					"type": "simple_grid_field"
				},
				"simple_grid_field34": {
					"field": "cp",
					"type": "simple_grid_field"
				},
				"simple_grid_field35": {
					"field": "calle",
					"type": "simple_grid_field"
				},
				"simple_grid_field36": {
					"field": "numeroext",
					"type": "simple_grid_field"
				},
				"simple_grid_field37": {
					"field": "numeroint",
					"type": "simple_grid_field"
				},
				"simple_grid_field38": {
					"field": "colonia",
					"type": "simple_grid_field"
				},
				"simple_grid_field39": {
					"field": "descripcion",
					"type": "simple_grid_field"
				},
				"simple_grid_field40": {
					"field": "maps_url",
					"type": "simple_grid_field"
				},
				"simple_grid_field41": {
					"field": "direccion",
					"type": "simple_grid_field"
				},
				"simple_grid_field42": {
					"field": "estatusentrega",
					"type": "simple_grid_field"
				},
				"simple_grid_field43": {
					"field": "equipo",
					"type": "simple_grid_field"
				},
				"simple_grid_field44": {
					"field": "chip",
					"type": "simple_grid_field"
				},
				"simple_grid_field45": {
					"field": "lat",
					"type": "simple_grid_field"
				},
				"simple_grid_field46": {
					"field": "lng",
					"type": "simple_grid_field"
				}
			},
			"dbProps": {},
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {}
		},
		{
			"id": "edit1",
			"type": "edit",
			"layoutId": "nomenu",
			"disabled": false,
			"default": 6,
			"forms": {
				"above-grid": {
					"modelId": "edit-above-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"edit_message"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"below-grid": {
					"modelId": "edit-below-grid",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								},
								{
									"cell": "c2"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"edit_save",
								"edit_back_list",
								"edit_close"
							]
						},
						"c2": {
							"model": "c2",
							"items": [
								"hamburger"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"top": {
					"modelId": "edit-header",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"edit_header"
							]
						}
					},
					"deferredItems": [],
					"recsPerRow": 1
				},
				"grid": {
					"modelId": "simple-edit",
					"grid": [
						{
							"cells": [
								{
									"cell": "c1"
								}
							],
							"section": ""
						},
						{
							"cells": [
								{
									"cell": "c3"
								}
							],
							"section": ""
						}
					],
					"cells": {
						"c1": {
							"model": "c1",
							"items": [
								"details_preview"
							]
						},
						"c3": {
							"model": "c3",
							"items": []
						}
					},
					"deferredItems": [],
					"columnCount": 1,
					"inlineLabels": false,
					"separateLabels": false
				}
			},
			"items": {
				"edit_header": {
					"type": "edit_header"
				},
				"hamburger": {
					"type": "hamburger",
					"items": [
						"edit_reset",
						"edit_view"
					]
				},
				"edit_reset": {
					"type": "edit_reset"
				},
				"edit_message": {
					"type": "edit_message"
				},
				"edit_save": {
					"type": "edit_save"
				},
				"edit_back_list": {
					"type": "edit_back_list"
				},
				"edit_close": {
					"type": "edit_close"
				},
				"edit_view": {
					"type": "edit_view"
				},
				"details_preview": {
					"type": "details_preview",
					"table": 3847630651,
					"items": [],
					"popup": false,
					"pageId": "list"
				}
			},
			"dbProps": {},
			"version": 13,
			"imageItem": {
				"type": "page_image"
			},
			"imageBgColor": "#f2f2f2",
			"controlsBgColor": "white",
			"imagePosition": "right",
			"listTotals": 1,
			"title": {}
		}
	],
	"geoCoding": {
		"enabled": false,
		"latField": "lat",
		"lonField": "lng",
		"addressFields": [
			"calle",
			"numeroext",
			"numeroint",
			"colonia",
			"ciudad",
			"estado",
			"cp",
			"lat",
			"lng"
		]
	},
	"caption": {
		"English": "Solicitudes"
	}
}